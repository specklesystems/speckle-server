apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "server.name" $ }}
  namespace: {{ .Values.namespace }}
  labels:
{{ include "server.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.server.replicas }}
  selector:
    matchLabels:
      app: speckle-server
      project: speckle-server
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
{{ include "server.labels" . | indent 8 }}
    spec:
      containers:
      - name: main
        image: speckle/speckle-server:{{ .Values.docker_image_tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}

        ports:
          - name: http
            containerPort: {{ include "server.port" $ }}
            protocol: TCP

        resources:
          requests:
            cpu: {{ .Values.server.requests.cpu }}
            memory: {{ .Values.server.requests.memory }}
          limits:
            cpu: {{ .Values.server.limits.cpu }}
            memory: {{ .Values.server.limits.memory }}

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 20000

        volumeMounts:
          - mountPath: /tmp
            name: tmp
        {{- if .Values.db.useCertificate }}
          - name: postgres-certificate
            mountPath: /postgres-certificate
        {{- end }}

        # Allow for k8s to remove the pod from the service endpoints to stop receive traffic
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "5"]


        livenessProbe:
          # account for long-running migrations
          initialDelaySeconds: 600
          periodSeconds: 60
          timeoutSeconds: 10
          exec:
            command:
              - node
              - -e
              - "require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET' }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end();"

        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          exec:
            command:
              - node
              - -e
              - "require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET' }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end();"

        env:
          - name: CANONICAL_URL
            {{- if .Values.ssl_canonical_url }}
            value: https://{{ .Values.domain }}
            {{- else }}
            value: http://{{ .Values.domain }}
            {{- end }}

          - name: PORT
            value: {{ include "server.port" $ | quote }}
          - name: LOG_LEVEL
            value: {{ .Values.server.logLevel }}

          - name: SESSION_SECRET
            valueFrom:
              secretKeyRef:
                name: "{{ default .Values.secretName .Values.server.sessionSecret.secretName }}"
                key: {{ default "session_secret" .Values.server.sessionSecret.secretKey }}

          - name: FILE_SIZE_LIMIT_MB
            value: {{ .Values.file_size_limit_mb | quote }}

          # *** Redis ***
          - name: REDIS_URL
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.secretName .Values.redis.connectionString.secretName }}
                key: {{ default "redis_url" .Values.redis.connectionString.secretKey }}

          # *** PostgreSQL Database ***
          - name: POSTGRES_URL
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.secretName .Values.db.connectionString.secretName }}
                key: {{ default "postgres_url" .Values.db.connectionString.secretKey }}
          - name: POSTGRES_MAX_CONNECTIONS_SERVER
            value: {{ .Values.db.maxConnectionsServer | quote }}

          - name: PGSSLMODE
            value: "{{ .Values.db.PGSSLMODE }}"

          {{- if .Values.db.useCertificate }}
          - name: NODE_EXTRA_CA_CERTS
            value: "/postgres-certificate/ca-certificate.crt"
          {{- end }}

          {{- if .Values.server.fileUploads.enabled }}
          {{ else }}
          - name: DISABLE_FILE_UPLOADS 
            value: "true"
          {{ end }}
            

          # *** S3 Object Storage ***
          {{- if (or .Values.s3.configMap.enabled .Values.s3.endpoint) }}
          {{- $s3values := ((include "server.s3Values" .) | fromJson ) }}
          - name: S3_ENDPOINT
            value: {{ $s3values.endpoint }}
          - name: S3_ACCESS_KEY
            value: {{ $s3values.access_key }}
          - name: S3_BUCKET
            value: {{ $s3values.bucket }}
          - name: S3_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.secretName .Values.s3.secret_key.secretName }}
                key: {{ default "s3_secret_key" .Values.s3.secret_key.secretKey }}
          - name: S3_CREATE_BUCKET
            value: "{{ .Values.s3.create_bucket }}"
          - name: S3_REGION
            value: "{{ .Values.s3.region }}"

          {{- end }}

          # *** Authentication ***

          # Local Auth
          - name: STRATEGY_LOCAL
            value: "{{ .Values.server.auth.local.enabled }}"

          # Google Auth
          {{- if .Values.server.auth.google.enabled }}
          - name: STRATEGY_GOOGLE
            value: "true"
          - name: GOOGLE_CLIENT_ID
            value: {{ .Values.server.auth.google.client_id }}
          - name: GOOGLE_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.secretName .Values.server.auth.google.clientSecret.secretName }}
                key: {{ default "google_client_secret" .Values.server.auth.google.clientSecret.secretKey }}
          {{- end }}

          # Github Auth
          {{- if .Values.server.auth.github.enabled }}
          - name: STRATEGY_GITHUB
            value: "true"
          - name: GITHUB_CLIENT_ID
            value: {{ .Values.server.auth.github.client_id }}
          - name: GITHUB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.secretName .Values.server.auth.github.clientSecret.secretName }}
                key: {{ default "github_client_secret" .Values.server.auth.github.clientSecret.secretKey }}
          {{- end }}

          # AzureAD Auth
          {{- if .Values.server.auth.azure_ad.enabled }}
          - name: STRATEGY_AZURE_AD
            value: "true"
          - name: AZURE_AD_ORG_NAME
            value: {{ .Values.server.auth.azure_ad.org_name }}
          - name: AZURE_AD_IDENTITY_METADATA
            value: {{ .Values.server.auth.azure_ad.identity_metadata }}
          - name: AZURE_AD_ISSUER
            value: {{ .Values.server.auth.azure_ad.issuer }}
          - name: AZURE_AD_CLIENT_ID
            value: {{ .Values.server.auth.azure_ad.client_id }}
          - name: AZURE_AD_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.secretName .Values.server.auth.azure_ad.clientSecret.secretName }}
                key: {{ default "azure_ad_client_secret" .Values.server.auth.azure_ad.clientSecret.secretKey }}
          {{- end }}


          # OpenID Connect Auth
          {{- if .Values.server.auth.oidc.enabled }}
          - name: STRATEGY_OIDC
            value: "true"
          - name: OIDC_NAME
            value: {{ .Values.server.auth.oidc.name }}
          - name: OIDC_DISCOVERY_URL
            value: {{ .Values.server.auth.oidc.discovery_url }}
          - name: OIDC_CLIENT_ID
            value: {{ .Values.server.auth.oidc.client_id }}
          - name: OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.secretName .Values.server.auth.oidc.clientSecret.secretName }}
                key: {{ default "oidc_client_secret" .Values.server.auth.oidc.clientSecret.secretKey }}
          {{- end }}


          # *** Email ***

          {{- if .Values.server.email.enabled }}
          - name: EMAIL
            value: "true"
          - name: EMAIL_HOST
            value: "{{ .Values.server.email.host }}"
          - name: EMAIL_PORT
            value: "{{ .Values.server.email.port }}"
          - name: EMAIL_USERNAME
            value: "{{ .Values.server.email.username }}"
          - name: EMAIL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.secretName .Values.server.email.password.secretName }}
                key: {{ default "email_password" .Values.server.email.password.secretKey }}
          {{- end }}

          # *** Tracking / Tracing ***
          - name: SENTRY_DSN
            value: {{ .Values.server.sentry_dns }}
          {{- if .Values.server.disable_tracing }}
          - name: DISABLE_TRACING
            value: "true"
          {{- end }}
          {{- if .Values.server.disable_tracking }}
          - name: DISABLE_TRACKING
            value: "true"
          {{- end }}

          # Monitoring - Apollo
          {{- if .Values.server.monitoring.apollo.enabled }}
          - name: APOLLO_GRAPH_ID
            value: {{ .Values.server.monitoring.apollo.graph_id }}
          - name: APOLLO_SCHEMA_REPORTING
            value: "true"
          - name: APOLLO_GRAPH_VARIANT
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: APOLLO_SERVER_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: APOLLO_SERVER_PLATFORM
            value: "kubernetes/deployment"
          - name: APOLLO_KEY
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.secretName .Values.server.monitoring.apollo.key.secretName }}
                key: {{ default "apollo_key" .Values.server.monitoring.apollo.key.secretKey }}
          {{- end }}
      {{- if .Values.server.affinity }}
      affinity: {{- include "speckle.renderTpl" (dict "value" .Values.server.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.nodeSelector }}
      nodeSelector: {{- include "speckle.renderTpl" (dict "value" .Values.server.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.tolerations }}
      tolerations: {{- include "speckle.renderTpl" (dict "value" .Values.server.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "speckle.renderTpl" (dict "value" .Values.server.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      priorityClassName: high-priority

      securityContext:
        runAsNonRoot: true
        runAsUser: 20000
        fsGroup: 25000
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 30000
        seccompProfile:
          type: RuntimeDefault

      {{- if .Values.server.serviceAccount.create }}
      serviceAccountName: {{ include "server.name" $ }}
      {{- end }}
      terminationGracePeriodSeconds: 310
      volumes:
        - name: tmp
          emptyDir: {}
      {{- if .Values.db.useCertificate }}
        - name: postgres-certificate
          configMap:
            name: postgres-certificate
      {{- end }}
