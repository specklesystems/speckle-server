apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "server.name" $ }}
  namespace: {{ .Values.namespace }}
  labels:
{{ include "server.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.server.replicas }}
  selector:
    matchLabels:
      app: speckle-server
      project: speckle-server
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
{{ include "server.labels" . | indent 8 }}
    spec:
      containers:
      - name: main
        image: {{ default (printf "speckle/speckle-server:%s" .Values.docker_image_tag) .Values.server.image }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        args: #overwrites the Dockerfile CMD statement
        {{- if .Values.server.inspect.enabled }}
          - {{ printf "--inspect=%s" .Values.server.inspect.port }}
        {{- end }}
          - "bin/www"
        ports:
          - name: http
            containerPort: {{ include "server.port" $ }}
            protocol: TCP

        resources:
          requests:
            cpu: {{ .Values.server.requests.cpu }}
            memory: {{ .Values.server.requests.memory }}
          limits:
            cpu: {{ .Values.server.limits.cpu }}
            memory: {{ .Values.server.limits.memory }}

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 20000

        volumeMounts:
          - mountPath: /tmp
            name: tmp
        {{- if .Values.db.useCertificate }}
          - name: postgres-certificate
            mountPath: /postgres-certificate
        {{- end }}
        {{- if .Values.featureFlags.automateModuleEnabled }}
          - name: encryption-keys
            readOnly: true
            mountPath: /encryption-keys
        {{- end }}

        # Allow for k8s to remove the pod from the service endpoints to stop receive traffic
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "5"]

        livenessProbe:
          # account for long-running migrations
          initialDelaySeconds: 600
          periodSeconds: 60
          timeoutSeconds: 10
          exec:
            command:
              - node
              - -e
              - "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }"

        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          exec:
            command:
              - node
              - -e
              - "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }"

        env:
{{ include "server.env" $ | indent 10 }}
{{/* NOTE: Environment variables are configured in utils/helm/speckle-server/templates/_helpers.tpl */}}
      {{- if .Values.server.affinity }}
      affinity: {{- include "speckle.renderTpl" (dict "value" .Values.server.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.nodeSelector }}
      nodeSelector: {{- include "speckle.renderTpl" (dict "value" .Values.server.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.tolerations }}
      tolerations: {{- include "speckle.renderTpl" (dict "value" .Values.server.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "speckle.renderTpl" (dict "value" .Values.server.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      priorityClassName: high-priority

      securityContext:
        runAsNonRoot: true
        runAsUser: 20000
        fsGroup: 25000
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 30000
        seccompProfile:
          type: RuntimeDefault

      {{- if .Values.server.serviceAccount.create }}
      serviceAccountName: {{ include "server.name" $ }}
      {{- end }}
      terminationGracePeriodSeconds: 310
      volumes:
        - name: tmp
          emptyDir: {}
      {{- if .Values.db.useCertificate }}
        - name: postgres-certificate
          configMap:
            name: postgres-certificate
      {{- end }}
      {{- if .Values.featureFlags.automateModuleEnabled }}
        - name: encryption-keys
          secret:
            secretName: encryption-keys
      {{- end }}
