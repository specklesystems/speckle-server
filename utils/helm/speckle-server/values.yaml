## @section Namespace
##

## @param namespace The name of the namespace in which Speckle will be deployed.
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
##
namespace: speckle-test

## @param create_namespace Enabling this will create a new namespace into which Speckle will be deployed
## The name of the namespace to create should be provided in the `namespace` parameter.
create_namespace: false

## @section SSL

## @param domain The DNS host name at which this Speckle deployment will be reachable
##
domain: localhost

## @param ssl_canonical_url HTTPS protocol will be the preferred protocol for serving this Speckle deployment
##
ssl_canonical_url: true

## @param cert_manager_issuer The name of the ClusterIssuer kubernetes resource that provides the SSL Certificate
##
cert_manager_issuer: letsencrypt-staging

ingress:
  ## @param ingress.namespace The namespace in which the ingress controller is deployed.
  ## @descriptionStart
  ## This value is ignored unless networkPolicy is enabled for frontend or server.
  ## The NetworkPolicy uses this value to enable connections from the ingress controller pod in this namespace to reach Speckle.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ## @descriptionEnd
  namespace: ingress-nginx
  ## @param ingress.controllerName The name of the Kubernetes pod in which the ingress controller is deployed.
  ## @descriptionStart
  ## This value is ignored unless networkPolicy is enabled for frontend or server.
  ## The NetworkPolicy uses this value to enable connections from the ingress controller pod to reach Speckle.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ## @descriptionEnd
  controllerName: ingress-nginx

## @section Common parameters

## @param docker_image_tag Speckle is published as a Docker Image.  The version of the image which will be deployed is specified by this tag.
##
docker_image_tag: v2.3.3

## @param imagePullPolicy Determines the conditions when the Docker Images for Speckle should be pulled from the Image registry
## ref: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
##
imagePullPolicy: IfNotPresent

## @param secretName This is the name of the Kubernetes Secret resource in which secrets for Speckle are stored
## Secrets within this Secret resource may include Postgres and Redis connectin strings, S3 secret values and email server passwords
## The expected key within the Secret resource is indicated elsewhere in this values.yaml file
## This is expected to be an opaque Secret resource type
## ref: https://kubernetes.io/docs/concepts/configuration/secret/#opaque-secrets
##
secretName: server-vars

## @param file_size_limit_mb This maximum size of any single file (unit is Megabytes) that can be uploaded to Speckle
file_size_limit_mb: 100

## @section Monitoring
##

## @param enable_prometheus_monitoring If enabled, Speckle deploys a Prometheus ServiceMonitor resource
## This enables metrics generated by Speckle to be ingested by Prometheus: https://prometheus.io/
## Enabling this requires Prometheus to have been deployed prior, as this resource expects the Prometheus Customer Resource Definition
##  for the ServiceMonitor to already be existing within the cluster.
## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/getting-started.md#related-resources
##
enable_prometheus_monitoring: false

prometheusMonitoring:
  ## @param prometheusMonitoring.namespace If provided, deploys Speckle's Prometheus resources in the given namespace
  ## Prometheus prior to v0.19.0, or any version when deployed with default parameters, expects ServiceMonitors to be deployed within the same namespace.
  ## This parameter allows the Prometheus resources provided by Speckle to be deployed in another namespace.
  ## This allows Prometheus (< v0.19.0 or any version with default configuration) to be deployed in a separate namespace from Speckle.
  ## Note that Speckle expect the namespace to exist prior to deployment.
  ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/getting-started.md#related-resources
  ##
  namespace: ''
  ## @param prometheusMonitoring.release If provided, adds the value to a `release` label on all the Prometheus resources deployed by Speckle
  ## Prometheus prior to v0.19.0, or any version when deployed with default parameters, expects ServiceMonitors to be selectable on the release label.
  ## This parameter allows Prometheus to be deployed with a non-default release name.
  ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/getting-started.md#related-resources
  ##
  release: ''

## @Section Postgres Database
## @descriptionStart
## Defines parameters related to connections to the Postgres database.
## A secret containing the connection string to the Postgres database must stored within the Kubernetes cluster as an opaque Kubernetes Secret.
## The name of the secret must match the `secretName` parameter, and the key within this secret must be `postgres_url`.
## ref: https://kubernetes.io/docs/concepts/configuration/secret/#opaque-secrets
## @descriptionEnd
db:
  # postgres_url: secret -> postgres_url
  ## @param db.useCertificate If enabled, the certificate defined in db.certificate is used to verify TLS connections to the Postgres database
  ##
  useCertificate: false
  ## @param db.maxConnectionServer The number of connections to the Postgres database to provide in the connection pool
  ##
  maxConnectionsServer: 4
  ## @param db.certificate The x509 public certificate for SSL connections to the Postgres database
  ## Use of this certificate requires db.useCertificate to be enabled and an appropriate value for db.PGSSLMODE provided.
  ## The value must be formatted as a multi-line string.  We recommend using the pipe-symbol and taking care to
  ##  indent all lines of the value correctly.
  ## ref: https://helm.sh/docs/chart_template_guide/yaml_techniques/#strings-in-yaml
  ##
  certificate: '' # Multi-line string with the contents of `ca-certificate.crt`
  ## @param db.PGSSLMODE This defines the level of security used when connecting to the Postgres database
  ## Postgres provides different froms of protection from different types of threat when communicating between the client (Speckle) and the Postgres database.
  ## ref: https://www.postgresql.org/docs/current/libpq-ssl.html#LIBPQ-SSL-PROTECTION
  ##
  PGSSLMODE: require
  ## @descriptionStart
  ## If networkPolicy is enabled for any service, this provides the NetworkPolicy with the necessary details to allow egress connections to the Postgres database
  ## @descriptionEnd
  networkPolicy:
    ## @param db.networkPolicy.port the port on the server providing the Postgres database (default: "5432")
    ##
    port: ''
    ## @descriptionStart
    ## db.networkPolicy.externalToCluster is only required if the Postgres database is not hosted within the Kubernetes cluster in which Speckle will be deployed.
    ## @descriptionEnd
    ##
    externalToCluster:
      ## @param db.networkPolicy.externalToCluster.enabled If enabled, indicates that the Postgres database is hosted externally to the Kubernetes cluster
      ## Only one of externalToCluster or inCluster should be enabled. If both are enabled then inCluster takes precedence and is the only one deployed
      ##
      enabled: true
      ## @param db.networkPolicy.externalToCluster.host The domain name at which the Postgres database is hosted.
      ## This should match the value provided within the connection string.
      ## Provide the IP address if available (use the `ipv4` parameter), as the IP address takes precedence.
      ##
      host: ''
      ## @param db.networkPolicy.externalToCluster.ipv4 The IP address at which the Postgres database is hosted
      ## This should be an IP address not within the Kubernetes Cluster Pod or Service IP ranges.
      ## If both host and ipv4 parameters are provided, ipv4 takes precedence and host is ignored.
      ipv4: ''
    ## @descriptionStart
    ## db.networkPolicy.inCluster is only required if the Postgres database is hosted within the Kubernetes cluster in which Speckle will be deployed.
    ## @descriptionEnd
    ##
    inCluster:
      ## @param db.networkPolicy.inCluster.enabled If enabled, indicates that the Postgres database is hosted withing the same Kubernetes cluster in which Speckle will be deployed
      ## Only one of externalToCluster or inCluster should be enabled. If both are enabled then inCluster takes precedence and is the only set of egress network policy rules deployed.
      ##
      enabled: false
      ## @param db.networkPolicy.inCluster.podSelector The pod Selector yaml object used to uniquely select the Postgres database pods within the cluster and given namespace
      ## This is a Kubernetes podSelector object
      ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
      ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
      ##
      podSelector: {}
      ## @param db.networkPolicy.inCluster.namespaceSelector The namespace selector yaml object used to uniquely select the namespace in which the Postgres database pods are deployed
      ## This is a Kubernetes namespaceSelector object
      ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
      ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
      ##
      namespaceSelector: {}

## @Section S3 Compatible Storage
## @descriptionStart
## Defines parameters related to connecting to the S3 compatible storage.
## A secret containing the secret key must stored within the Kubernetes cluster as an opaque Kubernetes Secret.
## The name of the Kubernetes Secret resource must match the `secretName` parameter, and the key within this Kubernetes Secret must be `s3_secret_key`.
## ref: https://kubernetes.io/docs/concepts/configuration/secret/#opaque-secrets
## @descriptionEnd
s3:
  ## @param s3.endpoint The URL at which the s3 compatible storage is hosted
  ## The url should be prefixed by the protocol (e.g. `https://`)
  ## The url may need to include the port if it is not the default (e.g. `443` for `https` protocol)
  ##
  endpoint: ''
  ## @param s3.bucket The s3 compatible bucket in which Speckle data will be stored
  ## The access key should be granted write permissions to this bucket
  ##
  bucket: ''
  ## @param s3.access_key The key of the access key used to authenticate with the s3 compatible storage
  ##
  access_key: ''
  ## @param s3.create_bucket If enabled, will create a bucket with the given bucket name at this endpoint
  ## If enabled, the access_key must be granted the appropriate bucket creation privileges
  ##
  create_bucket: 'false'
  ## @param s3.region The region in which the bucket resides (or will be created in).
  ## If not provided, defaults to `us-east-1`.  For many providers of s3 compatible storage, such as minio, this value may be ignored.
  ##
  region: ''
  ## @descriptionStart
  ## If networkPolicy is enabled for any service, this provides the NetworkPolicy with the necessary details to allow egress connections to the s3 compatible storage
  ## @descriptionEnd
  networkPolicy:
    ## @param s3.networkPolicy.port the port on the server providing the s3 compatible storage (default: "443")
    ##
    port: ''
    ## @descriptionStart
    ## s3.networkPolicy.externalToCluster is only required if the s3 compatible storage is not hosted within the Kubernetes cluster in which Speckle will be deployed.
    ## @descriptionEnd
    ##
    externalToCluster:
      ## @param s3.networkPolicy.externalToCluster.enabled If enabled, indicates that the s3 compatible storage is hosted externally to the Kubernetes cluster
      ## Only one of externalToCluster or inCluster should be enabled. If both are enabled then inCluster takes precedence and is the only one deployed
      ##
      enabled: true
      ## @param s3.networkPolicy.externalToCluster.host The domain name at which the s3 compatible storage is hosted.
      ## This should match the value provided within the connection string.
      ## Provide the IP address if available (use the `ipv4` parameter), as the IP address takes precedence.
      ##
      host: ''
      ## @param s3.networkPolicy.externalToCluster.ipv4 The IP address at which the s3 compatible storage is hosted
      ## This should be an IP address not within the Kubernetes Cluster Pod or Service IP ranges.
      ## If both host and ipv4 parameters are provided, ipv4 takes precedence and host is ignored.
      ipv4: ''
    ## @descriptionStart
    ## s3.networkPolicy.inCluster is only required if the s3 compatible storage is hosted within the Kubernetes cluster in which Speckle will be deployed.
    ## @descriptionEnd
    ##
    inCluster:
      ## @param s3.networkPolicy.inCluster.enabled If enabled, indicates that the s3 compatible storage is hosted withing the same Kubernetes cluster in which Speckle will be deployed
      ## Only one of externalToCluster or inCluster should be enabled. If both are enabled then inCluster takes precedence and is the only set of egress network policy rules deployed.
      ##
      enabled: false
      ## @param s3.networkPolicy.inCluster.podSelector The pod Selector yaml object used to uniquely select the s3 compatible storage pods within the cluster and given namespace
      ## This is a Kubernetes podSelector object
      ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
      ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
      ##
      podSelector: {}
      ## @param s3.networkPolicy.inCluster.namespaceSelector The namespace selector yaml object used to uniquely select the namespace in which the s3 compatible storage pods are deployed
      ## This is a Kubernetes namespaceSelector object
      ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
      ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
      ##
      namespaceSelector: {}

## @Section Redis Store
## @descriptionStart
## Defines parameters related to connecting to the Redis Store.
## A secret containing the redis url (containing domain, username, and password) must stored within the Kubernetes cluster as an opaque Kubernetes Secret.
## The name of the Kubernetes Secret resource must match the `secretName` parameter, and the key within this Kubernetes Secret resource must be `redis_url`.
## ref: https://kubernetes.io/docs/concepts/configuration/secret/#opaque-secrets
## @descriptionEnd
redis:
  ## @descriptionStart
  ## If networkPolicy is enabled for any service, this provides the NetworkPolicy with the necessary details to allow egress connections to the Redis store
  ## @descriptionEnd
  networkPolicy:
    ## @param redis.networkPolicy.port the port on the server providing the Redis store (default: "6379")
    ##
    port: ''
    ## @descriptionStart
    ## redis.networkPolicy.externalToCluster is only required if the Redis store is not hosted within the Kubernetes cluster in which Speckle will be deployed.
    ## @descriptionEnd
    ##
    externalToCluster:
      ## @param redis.networkPolicy.externalToCluster.enabled If enabled, indicates that the Redis store is hosted externally to the Kubernetes cluster
      ## Only one of externalToCluster or inCluster should be enabled. If both are enabled then inCluster takes precedence and is the only one deployed
      ##
      enabled: true
      ## @param redis.networkPolicy.externalToCluster.host The domain name at which the Redis store is hosted.
      ## This should match the value provided within the connection string.
      ## Provide the IP address if available (use the `ipv4` parameter), as the IP address takes precedence.
      ##
      host: ''
      ## @param redis.networkPolicy.externalToCluster.ipv4 The IP address at which the Redis store is hosted
      ## This should be an IP address not within the Kubernetes Cluster Pod or Service IP ranges.
      ## If both host and ipv4 parameters are provided, ipv4 takes precedence and host is ignored.
      ipv4: ''
    ## @descriptionStart
    ## redis.networkPolicy.inCluster is only required if the Redis store is hosted within the Kubernetes cluster in which Speckle will be deployed.
    ## @descriptionEnd
    ##
    inCluster:
      ## @param redis.networkPolicy.inCluster.enabled If enabled, indicates that the Redis store is hosted withing the same Kubernetes cluster in which Speckle will be deployed
      ## Only one of externalToCluster or inCluster should be enabled. If both are enabled then inCluster takes precedence and is the only set of egress network policy rules deployed.
      ##
      enabled: false
      ## @param redis.networkPolicy.inCluster.podSelector The pod Selector yaml object used to uniquely select the Redis store pods within the cluster and given namespace
      ## This is a Kubernetes podSelector object
      ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
      ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
      ##
      podSelector: {}
      ## @param redis.networkPolicy.inCluster.namespaceSelector The namespace selector yaml object used to uniquely select the namespace in which the Redis store pods are deployed
      ## This is a Kubernetes namespaceSelector object
      ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
      ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
      ##
      namespaceSelector: {}

## @Section Server
## @descriptionStart
## Defines parameters related to the backend server component of Speckle.
## A secret containing the an unique value (this can be generated randomly) must stored within the Kubernetes cluster as an opaque Kubernetes Secret.
## The name of the Kubernetes Secret resource must match the `secretName` parameter, and the key within this Secret resource must be `session_secret`.
## ref: https://kubernetes.io/docs/concepts/configuration/secret/#opaque-secrets
## @descriptionEnd
server:
  ## @param server.replicas The number of replicas of the Server pod to be deployed
  replicas: 1
  ## @section Authentication configuration
  ## @descriptionStart
  ## Speckle provides a number of different mechanisms for authenticating users.  Each available option must be configured here.
  ## @descriptionEnd
  auth:
    local:
      enabled: true
    google:
      enabled: false
      client_id: ''
      # client_secret: secret -> `google_client_secret`
    github:
      enabled: false
      client_id: ''
      # client_secret: secret -> `github_client_secret`
    azure_ad:
      enabled: false
      org_name: ''
      identity_metadata: ''
      issuer: ''
      client_id: ''
      # client_secret: secret -> `azure_ad_client_secret`
  email:
    enabled: false
    host: ''
    port: ''
    username: ''
    # password: secret -> `email_password`
  requests:
    cpu: 500m
    memory: 1Gi
  limits:
    cpu: 1000m
    memory: 3Gi
  serviceAccount:
    create: true

  monitoring:
    apollo:
      enabled: false
      graph_id: ''
      # key: secret -> `apollo_key`

  # Sentry specific:
  sentry_dns: ''
  disable_tracking: false
  disable_tracing: false
  networkPolicy:
    enabled: false
  ## @param server.affinity Affinity for Speckle server pods scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}
  ## @param server.nodeSelector Node labels for Speckle server pods scheduling
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param server.tolerations Tolerations for Speckle server pods scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param server.topologySpreadConstraints Spread Constraints for Speckle server pod scheduling
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ##
  topologySpreadConstraints: []

frontend:
  replicas: 1
  requests:
    cpu: 250m
    memory: 256Mi
  limits:
    cpu: 1000m
    memory: 512Mi
  networkPolicy:
    enabled: false
  ## @param frontend.affinity Affinity for Speckle frontend pod scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}
  ## @param frontend.nodeSelector Node labels for Speckle frontend pods scheduling
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param frontend.tolerations Tolerations for Speckle frontend pods scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param frontend.topologySpreadConstraints Spread Constraints for Speckle frontend pod scheduling
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ##
  topologySpreadConstraints: []
  serviceAccount:
    create: true

preview_service:
  replicas: 1
  requests:
    cpu: 500m
    memory: 2Gi
  limits:
    cpu: 1000m
    memory: 4Gi
  networkPolicy:
    enabled: false
  ## @param preview_service.affinity Affinity for Speckle preview_service pods scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}
  ## @param preview_service.nodeSelector Node labels for Speckle preview_service pods scheduling
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param preview_service.tolerations Tolerations for Speckle preview_service pods scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param preview_service.topologySpreadConstraints Spread Constraints for Speckle preview_service pod scheduling
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ##
  topologySpreadConstraints: []
  serviceAccount:
    create: true

webhook_service:
  replicas: 1
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 200m
    memory: 512Mi
  networkPolicy:
    enabled: false
  ## @param webhook_service.affinity Affinity for Speckle webhook_service pods scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}
  ## @param webhook_service.nodeSelector Node labels for Speckle webhook_service pods scheduling
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param webhook_service.tolerations Tolerations for Speckle webhook_service pods scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param webhook_service.topologySpreadConstraints Spread Constraints for Speckle webhook_service pod scheduling
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ##
  topologySpreadConstraints: []
  serviceAccount:
    create: true

fileimport_service:
  replicas: 1
  requests:
    cpu: 100m
    memory: 512Mi
  limits:
    cpu: 1000m
    memory: 2Gi
  serviceAccount:
    create: true
  time_limit_min: 10
  networkPolicy:
    enabled: false
  ## @param fileimport_service.affinity Affinity for Speckle fileimport_service pods scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}
  ## @param fileimport_service.nodeSelector Node labels for Speckle fileimport_service pods scheduling
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param fileimport_service.tolerations Tolerations for Speckle fileimport_service pods scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param fileimport_service.topologySpreadConstraints Spread Constraints for Speckle fileimport_service pod scheduling
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ##
  topologySpreadConstraints: []

monitoring:
  replicas: 1
  requests:
    cpu: 100m
    memory: 64Mi
  limits:
    cpu: 200m
    memory: 512Mi
  networkPolicy:
    enabled: false
  ## @param monitoring.affinity Affinity for Speckle monitoring pods scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}
  ## @param monitoring.nodeSelector Node labels for Speckle monitoring pods scheduling
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param monitoring.tolerations Tolerations for Speckle monitoring pods scheduling
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param monitoring.topologySpreadConstraints Spread Constraints for Speckle monitoring pod scheduling
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ##
  topologySpreadConstraints: []
  serviceAccount:
    create: true

## @section Testing

## @param helm_test_enabled If enabled, an additional pod is deployed which verifies some functionality of Speckle to determine if it is deployed correctly
##
helm_test_enabled: true

test:
  requests:
    cpu: 100m
    memory: 64Mi
  limits:
    cpu: 200m
    memory: 512Mi
  networkPolicy:
    enabled: false
  serviceAccount:
    create: true
