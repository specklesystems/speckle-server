// ESLint config generated by Nuxt
/// <reference path="./eslint-typegen.d.ts" />

import { composer } from '../node_modules/eslint-flat-config-utils/dist/index.mjs';
import typegen from '../node_modules/eslint-typegen/dist/index.mjs';
import { createConfigForNuxt, defineFlatConfigs, resolveOptions } from '../node_modules/@nuxt/eslint-config/dist/flat.mjs';

export { defineFlatConfigs }

export const configs = composer()

export const options = resolveOptions({
  "features": {
    "standalone": true
  },
  "dirs": {
    "pages": [
      "pages"
    ],
    "composables": [
      "composables",
      "utils"
    ],
    "components": [
      "components"
    ],
    "componentsPrefixed": [],
    "layouts": [
      "layouts"
    ],
    "plugins": [
      "plugins"
    ],
    "middleware": [
      "middleware"
    ],
    "modules": [
      "modules"
    ],
    "servers": [],
    "root": [
      "/workspaces/speckle-server/packages/dui3"
    ],
    "src": [
      ""
    ]
  }
})

configs.append(
// Nuxt Configs
createConfigForNuxt(options),

// Set globals from imports registry
{"name":"nuxt/import-globals","languageOptions":{"globals":{"isVue2":"readonly","isVue3":"readonly","useAsyncData":"readonly","useLazyAsyncData":"readonly","useNuxtData":"readonly","refreshNuxtData":"readonly","clearNuxtData":"readonly","defineNuxtComponent":"readonly","useNuxtApp":"readonly","defineNuxtPlugin":"readonly","definePayloadPlugin":"readonly","reloadNuxtApp":"readonly","useRuntimeConfig":"readonly","useState":"readonly","clearNuxtState":"readonly","useFetch":"readonly","useLazyFetch":"readonly","useCookie":"readonly","useRequestHeaders":"readonly","useRequestEvent":"readonly","useRequestFetch":"readonly","useRequestURL":"readonly","setResponseStatus":"readonly","setPageLayout":"readonly","onNuxtReady":"readonly","useRouter":"readonly","useRoute":"readonly","defineNuxtRouteMiddleware":"readonly","navigateTo":"readonly","abortNavigation":"readonly","addRouteMiddleware":"readonly","showError":"readonly","clearError":"readonly","isNuxtError":"readonly","useError":"readonly","createError":"readonly","defineNuxtLink":"readonly","useAppConfig":"readonly","updateAppConfig":"readonly","defineAppConfig":"readonly","preloadComponents":"readonly","preloadRouteComponents":"readonly","prefetchComponents":"readonly","loadPayload":"readonly","preloadPayload":"readonly","isPrerendered":"readonly","definePayloadReducer":"readonly","definePayloadReviver":"readonly","onBeforeRouteLeave":"readonly","onBeforeRouteUpdate":"readonly","withCtx":"readonly","withDirectives":"readonly","withKeys":"readonly","withMemo":"readonly","withModifiers":"readonly","withScopeId":"readonly","onActivated":"readonly","onBeforeMount":"readonly","onBeforeUnmount":"readonly","onBeforeUpdate":"readonly","onDeactivated":"readonly","onErrorCaptured":"readonly","onMounted":"readonly","onRenderTracked":"readonly","onRenderTriggered":"readonly","onServerPrefetch":"readonly","onUnmounted":"readonly","onUpdated":"readonly","computed":"readonly","customRef":"readonly","isProxy":"readonly","isReactive":"readonly","isReadonly":"readonly","isRef":"readonly","markRaw":"readonly","proxyRefs":"readonly","reactive":"readonly","readonly":"readonly","ref":"readonly","shallowReactive":"readonly","shallowReadonly":"readonly","shallowRef":"readonly","toRaw":"readonly","toRef":"readonly","toRefs":"readonly","triggerRef":"readonly","unref":"readonly","watch":"readonly","watchEffect":"readonly","watchPostEffect":"readonly","watchSyncEffect":"readonly","isShallow":"readonly","effect":"readonly","effectScope":"readonly","getCurrentScope":"readonly","onScopeDispose":"readonly","defineComponent":"readonly","defineAsyncComponent":"readonly","resolveComponent":"readonly","getCurrentInstance":"readonly","h":"readonly","inject":"readonly","hasInjectionContext":"readonly","nextTick":"readonly","provide":"readonly","defineModel":"readonly","defineOptions":"readonly","defineSlots":"readonly","mergeModels":"readonly","toValue":"readonly","useModel":"readonly","useAttrs":"readonly","useCssModule":"readonly","useCssVars":"readonly","useSlots":"readonly","useTransitionState":"readonly","Component":"readonly","ComponentPublicInstance":"readonly","ComputedRef":"readonly","ExtractPropTypes":"readonly","ExtractPublicPropTypes":"readonly","InjectionKey":"readonly","PropType":"readonly","Ref":"readonly","MaybeRef":"readonly","MaybeRefOrGetter":"readonly","VNode":"readonly","injectHead":"readonly","useHead":"readonly","useSeoMeta":"readonly","useHeadSafe":"readonly","useServerHead":"readonly","useServerSeoMeta":"readonly","useServerHeadSafe":"readonly","usePinia":"readonly","definePageMeta":"readonly","useLink":"readonly"}}}
)

export function withNuxt(...customs) {
  return configs
    .clone()
    .append(...customs)
    .onResolved(configs => typegen(configs, { dtsPath: new URL("./eslint-typegen.d.ts", import.meta.url), augmentFlatConfigUtils: true }))
}

export default withNuxt