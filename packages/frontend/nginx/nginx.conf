server_tokens off;
gzip on;
gzip_disable "msie6";

gzip_vary on;
gzip_proxied any;
gzip_comp_level 6;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_min_length 256;
gzip_types
  application/atom+xml
  application/geo+json
  application/javascript
  application/x-javascript
  application/json
  application/ld+json
  application/manifest+json
  application/rdf+xml
  application/rss+xml
  application/xhtml+xml
  application/xml
  font/eot
  font/otf
  font/ttf
  image/svg+xml
  text/css
  text/javascript
  text/plain
  text/xml;

server {
  listen 80;
  client_max_body_size 100m;

  location / {
    root   /usr/share/nginx/html;
    index app.html;
    try_files $uri $uri/ /app.html;
    add_header Cache-Control "no-store, no-cache, must-revalidate";    
  }

  location ~* ^/(favicon.ico|logo.svg) {
    root   /usr/share/nginx/html;
    index app.html;
    try_files $uri $uri/ /app.html;
    expires 1d;
  }

  location ~* ^/(js/.*|fonts/.*|(css/.*)|(img/.*)) {
    root   /usr/share/nginx/html;
    index app.html;
    try_files $uri $uri/ /app.html;
    expires 1y;
  }

  location /embed { 
    default_type text/html;
    alias /usr/share/nginx/html/embedApp.html;
    add_header Cache-Control "no-store, no-cache, must-revalidate";    
  }

  location ~ ^/streams/.* {
    default_type text/html;
    content_by_lua_block {
      local f = assert(io.open('/usr/share/nginx/html/app.html', "rb"))
      local content = f:read("*all")
      f:close()
      local http_host = ngx.var.http_host

      content = content:gsub('<meta property=og:title (.-)>', '<meta property=og:title content="Speckle Stream">')

      local stream_id = ngx.var.uri:sub(10)
      local img_tag = '<meta property=og:image content="https://' .. http_host .. '/preview/' .. stream_id .. '?postprocess=og&ts=' .. ngx.now() .. '">'

      content = content:gsub('<meta property=og:image (.-)>', img_tag)

      ngx.say(content)
    }
  }

  location ~* ^/(graphql|explorer|(auth/.*)|(objects/.*)|(preview/.*)|(api/.*)) {
    resolver 127.0.0.11 valid=30s;
    set $upstream_speckle_server speckle-server;
    client_max_body_size 100m;
    proxy_pass http://$upstream_speckle_server:3000;

    proxy_buffering off;
    proxy_request_buffering off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  error_page   500 502 503 504  /50x.html;

  location = /50x.html {
    root   /usr/share/nginx/html;
  }
}
