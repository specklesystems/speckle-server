#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http')
const app = require('../dist/server/app')
const metricsApp = require('../dist/observability/metricsApp')
const { startPreviewService } = require('../dist/server/background')
const { serverLogger } = require('../dist/observability/logging')
const { getAppPort, getHost, getMetricsPort } = require('../dist/utils/env')
const { initPrometheusMetrics } = require('../dist/observability/prometheusMetrics')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(getAppPort())
app.set('port', port)

// we place the metrics on a separate port as we wish to expose it to external monitoring tools, but do not wish to expose other routes (for now)
const metricsPort = normalizePort(getMetricsPort())
metricsApp.set('port', metricsPort)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)
const metricsServer = http.createServer(metricsApp)

/**
 * Listen on provided port, on all network interfaces.
 */

const host = getHost()
server.listen(port, host)
server.on('error', onError)
server.on('listening', () => {
  onListening(server)
  startPreviewService()
})
metricsServer.listen(metricsPort, host)
metricsServer.on('error', onError)
metricsServer.on('listening', () => {
  onListening(metricsServer)
  initPrometheusMetrics()
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      serverLogger.error(error, bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      serverLogger.error(error, bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(referenceServer) {
  const addr = referenceServer.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr?.port
  serverLogger.info('Listening on ' + bind)
}
