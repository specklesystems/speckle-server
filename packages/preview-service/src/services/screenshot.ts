import { LoadPageAndEvaluateScript } from '@/clients/puppeteer.js'
import type { ObjectIdentifier } from '@/domain/domain.js'
import { reduce } from 'lodash-es'
import type { Logger } from 'pino'
import { z } from 'zod'

export type GetScreenshot = (
  params: ObjectIdentifier
) => Promise<{ [key: string]: string } | null>

export const getScreenshotFactory =
  (deps: {
    loadPageAndEvaluateScript: LoadPageAndEvaluateScript
    logger: Logger
    serviceOrigin: string
  }): GetScreenshot =>
  async (params) => {
    const objectUrl = `${deps.serviceOrigin}/streams/${params.streamId}/objects/${params.objectId}`

    const RenderOutputSchema = z.object({
      duration: z.number(),
      mem: z.object({ total: z.number() }),
      scr: z.record(z.string())
    })
    type RenderOutput = z.infer<typeof RenderOutputSchema>

    let renderOutput: RenderOutput
    try {
      // assume it is of type RenderOutput, and validate later
      const rawRenderOutput = await deps.loadPageAndEvaluateScript(objectUrl)
      renderOutput = await RenderOutputSchema.parseAsync(rawRenderOutput)
    } catch (err) {
      if (err instanceof z.ZodError) {
        deps.logger.error(
          err,
          'Error generating preview. Expected output was not returned.'
        )
      } else {
        deps.logger.error(err, 'Error generating preview.')
      }
      return null
    }

    deps.logger.info(
      {
        durationSeconds: renderOutput.duration,
        totalMemoryMB: renderOutput.mem.total / 1000000,
        resultingImages: {
          count: Object.keys(renderOutput.scr || {}).length,
          totalStringSize: reduce(
            renderOutput.scr || {},
            (acc: number, val: string) => acc + val.length,
            0
          )
        }
      },
      `Generated preview.`
    )
    return renderOutput.scr

    // return `
    // <html><body>
    // <div>Generated by: ${ret.userAgent}</div>
    // <div>Duration in seconds: ${ret.duration}</div>
    // <div>Memory in MB: ${ret.mem.total / 1000000}</div>
    // <div>Used Memory in MB: ${ret.mem.used / 1000000}</div>
    // <img height="200px" src="${ret.scr['-2']}" /><br />
    // <img height="200px" src="${ret.scr['-1']}" /><br />
    // <img height="200px" src="${ret.scr['0']}" /><br />
    // <img height="200px" src="${ret.scr['1']}" /><br />
    // <img height="200px" src="${ret.scr['2']}" /><br />
    // </body></html>
    // `

    // const imageBuffer = new Buffer.from(
    //   b64Image.replace(/^data:image\/\w+;base64,/, ''),
    //   'base64'
    // )

    // // await page.waitForTimeout(500);
    // //var response = await page.screenshot({
    // //  type: 'png',
    // //  clip: {x: 0, y: 0, width: 800, height: 800}
    // //});

    // return imageBuffer
  }
