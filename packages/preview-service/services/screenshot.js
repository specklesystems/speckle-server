'use strict'

const { reduce } = require('lodash')
const {
  shouldBeHeadless,
  getPuppeteerUserDataDir,
  getChromiumExecutablePath
} = require('../utils/env')

const getScreenshot = async (
  puppeteerClient,
  pageToOpenUrl,
  puppeteerFunctionToEvaluateInBrowser,
  objectUrl,
  boundLogger
) => {
  const launchParams = {
    headless: shouldBeHeadless(),
    userDataDir: getPuppeteerUserDataDir(),
    executablePath: getChromiumExecutablePath(),
    protocolTimeout: 360_000,
    // we trust the web content that is running, so can disable the sandbox
    // disabling the sandbox allows us to run the docker image without linux kernel privileges
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
  }

  await puppeteerClient.init(launchParams)

  let ret = null
  try {
    ret = await puppeteerClient.loadPageAndEvaluateScript(
      boundLogger,
      pageToOpenUrl,
      puppeteerFunctionToEvaluateInBrowser,
      objectUrl
    )
  } catch (err) {
    boundLogger.error(err, 'Error generating preview.')
    ret = {
      error: err
    }
  }

  // Don't await for cleanup
  puppeteerClient.close()

  if (ret.error) {
    return null
  }

  boundLogger.info(
    {
      durationSeconds: ret.duration,
      totalMemoryMB: ret.mem.total / 1000000,
      resultingImages: {
        count: Object.keys(ret.scr || {}).length,
        totalStringSize: reduce(ret.scr || {}, (acc, val) => acc + val.length, 0)
      }
    },
    `Generated preview.`
  )
  return ret.scr

  // return `
  // <html><body>
  // <div>Generated by: ${ret.userAgent}</div>
  // <div>Duration in seconds: ${ret.duration}</div>
  // <div>Memory in MB: ${ret.mem.total / 1000000}</div>
  // <div>Used Memory in MB: ${ret.mem.used / 1000000}</div>
  // <img height="200px" src="${ret.scr['-2']}" /><br />
  // <img height="200px" src="${ret.scr['-1']}" /><br />
  // <img height="200px" src="${ret.scr['0']}" /><br />
  // <img height="200px" src="${ret.scr['1']}" /><br />
  // <img height="200px" src="${ret.scr['2']}" /><br />
  // </body></html>
  // `

  // const imageBuffer = new Buffer.from(
  //   b64Image.replace(/^data:image\/\w+;base64,/, ''),
  //   'base64'
  // )

  // // await page.waitForTimeout(500);
  // //var response = await page.screenshot({
  // //  type: 'png',
  // //  clip: {x: 0, y: 0, width: 800, height: 800}
  // //});

  // return imageBuffer
}

module.exports = {
  getScreenshot
}
