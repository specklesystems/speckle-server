extend type Query {
  comment(id: String!, streamId: String!): Comment
  """
  This query can be used in the following ways:
  - get all the comments for a stream: **do not pass in any resource identifiers**.
  - get the comments targeting any of a set of provided resources (comments/objects): **pass in an array of resources.**
  """
  comments(
    streamId: String!
    resources: [ResourceIdentifierInput]
    limit: Int = 25
    cursor: String
    archived: Boolean! = false
  ): CommentCollection @deprecated(reason: "Use 'commentThreads' fields instead")
}

extend type Project {
  """
  All comment threads in this project
  """
  commentThreads(
    cursor: String
    limit: Int! = 25
    filter: ProjectCommentsFilter
  ): ProjectCommentCollection!
}

extend type Version {
  """
  All comment threads in this version
  """
  commentThreads(cursor: String, limit: Int! = 25): CommentCollection!
}

extend type Model {
  """
  All comment threads in this model
  """
  commentThreads(cursor: String, limit: Int! = 25): CommentCollection!
}

extend type Stream {
  """
  The total number of comments for this stream. To actually get the comments, use the comments query without passing in a resource array. E.g.:

  ```
  query{
    comments(streamId:"streamId"){
      ...
    }
  ```
  """
  commentCount: Int!
}

extend type Commit {
  """
  The total number of comments for this commit. To actually get the comments, use the comments query and pass in a resource array consisting of of this commit's id.
  E.g.,
  ```
  query{
    comments(streamId:"streamId" resources:[{resourceType: commit, resourceId:"commitId"}] ){
      ...
    }
  ```
  """
  commentCount: Int!
}

extend type Object {
  """
  The total number of comments for this commit. To actually get the comments, use the comments query and pass in a resource array consisting of of this object's id.
  E.g.,
  ```
  query{
    comments(streamId:"streamId" resources:[{resourceType: object, resourceId:"objectId"}] ){
      ...
    }
  ```
  """
  commentCount: Int!
}

type CommentDataFilters {
  hiddenIds: [String!]
  isolatedIds: [String!]
  propertyInfoKey: String
  passMax: Float
  passMin: Float
  sectionBox: JSONObject
}

type LegacyCommentViewerData {
  """
  THREE.Vector3 {x, y, z}
  """
  location: JSONObject!
  """
  An array representing a user's camera position:
  [camPos.x, camPos.y, camPos.z, camTarget.x, camTarget.y, camTarget.z, isOrtho, zoomNumber]
  """
  camPos: [Float!]!
  """
  Viewer.getCurrentSectionBox(): THREE.Box3
  """
  sectionBox: JSONObject
  """
  Currently unused. Ideally comments should keep track of selected objects.
  """
  selection: JSONObject
  """
  Old FE LocalFilterState type
  """
  filters: CommentDataFilters!
}

type Comment {
  id: String!
  author: LimitedUser!
  authorId: String!
  archived: Boolean!
  screenshot: String
  text: SmartTextEditorValue!
  """
  Plain-text version of the comment text, ideal for previews
  """
  rawText: String!
  """
  Resources that this comment targets. Can be a mixture of either one stream, or multiple commits and objects.
  """
  resources: [ResourceIdentifier!]!
  """
  Resource identifiers as defined and implemented in the Viewer of the new frontend
  """
  viewerResources: [ViewerResourceItem!]!
  createdAt: DateTime!
  """
  The time this comment was last updated. Corresponds also to the latest reply to this comment, if any.
  """
  updatedAt: DateTime!
  """
  The last time you viewed this comment. Present only if an auth'ed request. Relevant only if a top level commit.
  """
  viewedAt: DateTime
  """
  Gets the replies to this comment.
  """
  replies(limit: Int = 25, cursor: String): CommentCollection!
  """
  Get authors of replies to this comment
  """
  replyAuthors(limit: Int! = 25): CommentReplyAuthorCollection!
  reactions: [String] @deprecated(reason: "Not actually implemented")
  """
  Whether or not comment is a reply to another comment
  """
  hasParent: Boolean!
  """
  Parent thread, if there's any
  """
  parent: Comment
}

type CommentReplyAuthorCollection {
  items: [LimitedUser!]!
  totalCount: Int!
}

type CommentCollection {
  totalCount: Int!
  cursor: String
  items: [Comment!]!
}

type ProjectCommentCollection {
  totalCount: Int!
  totalArchivedCount: Int!
  cursor: String
  items: [Comment!]!
}

input ProjectCommentsFilter {
  """
  Only request comments belonging to the resources identified by this
  comma-delimited resouce string (same format that's used in the viewer URL)
  """
  resourceIdString: String

  """
  By default if resourceIdString is set, the "versionId" part of model resource identifiers will be ignored
  and all comments of all versions of any of the referenced models will be returned. If `loadedVersionsOnly` is
  enabled, then only comment threads of loaded/referenced versions in resourceIdString will be returned.
  """
  loadedVersionsOnly: Boolean

  """
  Whether or not to include archived/resolved threads
  """
  includeArchived: Boolean
}

type ResourceIdentifier {
  resourceId: String!
  resourceType: ResourceType!
}

input ResourceIdentifierInput {
  resourceId: String!
  resourceType: ResourceType!
}

enum ResourceType {
  comment
  object
  commit
  stream
}

"""
Equivalent to frontend-1's LocalFilterState
"""
input CommentDataFiltersInput {
  hiddenIds: [String!]
  isolatedIds: [String!]
  propertyInfoKey: String
  passMax: Float
  passMin: Float
  sectionBox: JSONObject
}

"""
Deprecated: Used by old stream-based mutations
"""
input CommentCreateInput {
  streamId: String!
  """
  Specifies the resources this comment is linked to. There are several use cases:
  - a comment targets only one resource (commit or object)
  - a comment targets one or more resources (commits or objects)
  - a comment targets only a stream
  """
  resources: [ResourceIdentifierInput]!
  """
  ProseMirror document object
  """
  text: JSONObject
  data: JSONObject!
  """
  IDs of uploaded blobs that should be attached to this comment
  """
  blobIds: [String!]!
  screenshot: String
}

input CommentContentInput {
  doc: JSONObject
  blobIds: [String!]
}

input CreateCommentInput {
  projectId: String!
  content: CommentContentInput!
  """
  SerializedViewerState. If omitted, comment won't render (correctly) inside the
  viewer, but will still be retrievable through the API
  """
  viewerState: JSONObject
  """
  Resources that this comment should be attached to
  """
  resourceIdString: String!
  screenshot: String
}

"""
Deprecated: Used by old stream-based mutations
"""
input ReplyCreateInput {
  streamId: String!
  parentComment: String!
  """
  ProseMirror document object
  """
  text: JSONObject
  """
  IDs of uploaded blobs that should be attached to this reply
  """
  blobIds: [String!]!
  data: JSONObject
}

input CreateCommentReplyInput {
  content: CommentContentInput!
  threadId: String!
}

"""
Deprecated: Used by old stream-based mutations
"""
input CommentEditInput {
  streamId: String!
  id: String!
  """
  ProseMirror document object
  """
  text: JSONObject
  """
  IDs of uploaded blobs that should be attached to this comment
  """
  blobIds: [String!]!
}

input EditCommentInput {
  commentId: String!
  content: CommentContentInput!
}

type CommentMutations {
  markViewed(commentId: String!): Boolean!
  create(input: CreateCommentInput!): Comment!
  reply(input: CreateCommentReplyInput!): Comment!
  edit(input: EditCommentInput!): Comment!
  archive(commentId: String!, archived: Boolean! = true): Boolean!
}

extend type Mutation {
  commentMutations: CommentMutations! @hasServerRole(role: SERVER_GUEST)

  """
  Used for broadcasting real time chat head bubbles and status. Does not persist any info.
  """
  userViewerActivityBroadcast(
    streamId: String!
    resourceId: String!
    data: JSONObject
  ): Boolean!
    @hasServerRole(role: SERVER_GUEST)
    @deprecated(reason: "Use broadcastViewerUserActivity")

  """
  Used for broadcasting real time typing status in comment threads. Does not persist any info.
  """
  userCommentThreadActivityBroadcast(
    streamId: String!
    commentId: String!
    data: JSONObject
  ): Boolean!
    @hasServerRole(role: SERVER_GUEST)
    @deprecated(reason: "Use broadcastViewerUserActivity")

  """
  Creates a comment
  """
  commentCreate(input: CommentCreateInput!): String!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "streams:read")
    @deprecated(reason: "Use commentMutations version")

  """
  Flags a comment as viewed by you (the logged in user).
  """
  commentView(streamId: String!, commentId: String!): Boolean!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "streams:read")
    @deprecated(reason: "Use commentMutations version")

  """
  Archives a comment.
  """
  commentArchive(
    streamId: String!
    commentId: String!
    archived: Boolean! = true
  ): Boolean!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "streams:read")
    @deprecated(reason: "Use commentMutations version")

  """
  Edits a comment.
  """
  commentEdit(input: CommentEditInput!): Boolean!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "streams:read")
    @deprecated(reason: "Use commentMutations version")

  """
  Adds a reply to a comment.
  """
  commentReply(input: ReplyCreateInput!): String!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "streams:read")
    @deprecated(reason: "Use commentMutations version")
}

type CommentActivityMessage {
  type: String!
  comment: Comment!
}

type CommentThreadActivityMessage {
  type: String!
  data: JSONObject
  reply: Comment
}

enum ProjectCommentsUpdatedMessageType {
  CREATED
  UPDATED
  ARCHIVED
}

type ProjectCommentsUpdatedMessage {
  type: ProjectCommentsUpdatedMessageType!
  id: String!
  """
  Null if deleted
  """
  comment: Comment
}

input ViewerUpdateTrackingTarget {
  projectId: String!

  """
  Only request updates to the resources identified by this
  comma-delimited resouce string (same format that's used in the viewer URL)
  """
  resourceIdString: String!

  """
  By default if resourceIdString is set, the "versionId" part of model resource identifiers will be ignored
  and all updates to of all versions of any of the referenced models will be returned. If `loadedVersionsOnly` is
  enabled, then only updates of loaded/referenced versions in resourceIdString will be returned.
  """
  loadedVersionsOnly: Boolean
}

extend type Subscription {
  """
  Subscribe to updates to resource comments/threads. Optionally specify resource ID string to only receive
  updates regarding comments for those resources.
  """
  projectCommentsUpdated(
    target: ViewerUpdateTrackingTarget!
  ): ProjectCommentsUpdatedMessage!

  """
  Broadcasts "real-time" location data for viewer users.
  """
  userViewerActivity(streamId: String!, resourceId: String!): JSONObject
    @deprecated(reason: "Use viewerUserActivityBroadcasted")

  """
  Subscribe to new comment events. There's two ways to use this subscription:
  - for a whole stream: do not pass in any resourceIds; this sub will get called whenever a comment (not reply) is added to any of the stream's resources.
  - for a specific resource/set of resources: pass in a list of resourceIds (commit or object ids); this sub will get called when *any* of the resources provided get a comment.
  """
  commentActivity(streamId: String!, resourceIds: [String]): CommentActivityMessage!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "streams:read")
    @deprecated(reason: "Use projectCommentsUpdated")

  """
  Subscribes to events on a specific comment. Use to find out when:
  - a top level comment is deleted (trigger a deletion event outside)
  - a top level comment receives a reply.
  """
  commentThreadActivity(
    streamId: String!
    commentId: String!
  ): CommentThreadActivityMessage!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "streams:read")
    @deprecated(
      reason: "Use projectCommentsUpdated or viewerUserActivityBroadcasted for reply status"
    )
}
