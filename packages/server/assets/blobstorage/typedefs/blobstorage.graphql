extend type ServerInfo {
  blobSizeLimitBytes: Int!
    @deprecated(
      reason: "Use the ServerInfo{configuration{blobSizeLimitBytes}} field instead."
    )
}

extend type ServerConfiguration {
  blobSizeLimitBytes: Int!
}

extend type Stream {
  """
  Get the metadata collection of blobs stored for this stream.
  """
  blobs(
    query: String = null
    limit: Int = 25
    cursor: String = null
  ): BlobMetadataCollection
    @deprecated(
      reason: "Part of the old API surface and will be removed in the future. Use Project.blobs instead."
    )

  blob(id: String!): BlobMetadata
    @deprecated(
      reason: "Part of the old API surface and will be removed in the future. Use Project.blob instead."
    )
}

extend type Project {
  """
  Get the metadata collection of blobs stored for this stream.
  """
  blobs(
    query: String = null
    limit: Int = 25
    cursor: String = null
  ): BlobMetadataCollection

  blob(id: String!): BlobMetadata
}

input GenerateUploadUrlInput {
  projectId: String!
  fileName: String!
}

type GenerateUploadUrlOutput {
  url: String!
  blobId: String!
}

input RegisterCompletedUploadInput {
  projectId: String!

  blobId: String!
  """
  The etag is returned by the blob storage provider in the response body after a successful upload.
  It is used to verify the integrity of the uploaded file.
  """
  etag: String!
}

type BlobMutations {
  """
  Generate a pre-signed url to which a blob can be uploaded.
  """
  generateUploadUrl(input: GenerateUploadUrlInput!): GenerateUploadUrlOutput!
  """
  Once the upload to the pre-signed url is completed, this mutation should be called
  to register the completed upload and create the blob metadata.
  """
  registerCompletedUpload(input: RegisterCompletedUploadInput!): BlobMetadata!
}

extend type Mutation {
  blobMutations: BlobMutations! @hasServerRole(role: SERVER_GUEST)
}

type BlobMetadataCollection {
  totalCount: Int!
  totalSize: Int!
  cursor: String
  items: [BlobMetadata!]
}

type BlobMetadata {
  id: String!
  streamId: String!
  userId: String!
  fileName: String!
  fileType: String!
  fileHash: String
  fileSize: Int
  uploadStatus: Int!
  uploadError: String
  createdAt: DateTime!
}
