extend type Query {
  """
  Returns a specific stream. Will throw an authorization error if active user isn't authorized
  to see it, for example, if a stream isn't public and the user doesn't have the appropriate rights.
  """
  stream(id: String!): Stream

  """
  Returns all streams that the active user is a collaborator on.
  Pass in the `query` parameter to search by name, description or ID.
  """
  streams(query: String, limit: Int = 25, cursor: String): StreamCollection
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")

  """
  All the streams of the server. Available to admins only.
  """
  adminStreams(
    offset: Int = 0
    query: String
    orderBy: String
    visibility: String
    limit: Int = 25
  ): StreamCollection @hasRole(role: "server:admin")

  """
  All of the discoverable streams of the server
  """
  discoverableStreams(
    limit: Int! = 25
    cursor: String
    """
    Defaults to sorting by creation date in a descending order
    """
    sort: DiscoverableStreamsSortingInput
  ): StreamCollection
}

type Stream {
  id: String!
  name: String!
  description: String
  """
  Whether the stream can be viewed by non-contributors
  """
  isPublic: Boolean!
  """
  Whether the stream (if public) can be found on public stream exploration pages
  and searches
  """
  isDiscoverable: Boolean!
  allowPublicComments: Boolean!
  """
  Your role for this stream. `null` if request is not authenticated, or the stream is not explicitly shared with you.
  """
  role: String
  createdAt: DateTime!
  updatedAt: DateTime!
  collaborators: [StreamCollaborator!]!
  """
  Collaborators who have been invited, but not yet accepted.
  """
  pendingCollaborators: [PendingStreamCollaborator!] @hasStreamRole(role: STREAM_OWNER)
  size: String
  """
  Date when you favorited this stream. `null` if stream isn't viewed from a specific user's perspective or if it isn't favorited.
  """
  favoritedDate: DateTime
  # How many times this stream has been favorited
  favoritesCount: Int!
}

extend type User {
  """
  Returns all streams that the user is a collaborator on. If requested for a user, who isn't the
  authenticated user, then this will only return discoverable streams.
  """
  streams(limit: Int! = 25, cursor: String): StreamCollection!
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")

  """
  All the streams that a active user has favorited.
  Note: You can't use this to retrieve another user's favorite streams.
  """
  favoriteStreams(limit: Int! = 25, cursor: String): StreamCollection!
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")

  """
  Total amount of favorites attached to streams owned by the user
  """
  totalOwnedStreamsFavorites: Int!
}

extend type LimitedUser {
  """
  Returns all discoverable streams that the user is a collaborator on
  """
  streams(limit: Int! = 25, cursor: String): StreamCollection!
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")

  """
  Total amount of favorites attached to streams owned by the user
  """
  totalOwnedStreamsFavorites: Int!
}

type StreamCollaborator {
  id: String!
  name: String!
  role: String!
  company: String
  avatar: String
}

type PendingStreamCollaborator {
  id: String!
  inviteId: String!
  streamId: String!
  streamName: String!
  """
  E-mail address or name of the invited user
  """
  title: String!
  role: String!
  invitedBy: LimitedUser!
  """
  Set only if user is registered
  """
  user: LimitedUser
  """
  Only available if the active user is the pending stream collaborator
  """
  token: String
}

type StreamCollection {
  totalCount: Int!
  cursor: String
  items: [Stream!]
}

extend type Mutation {
  """
  Creates a new stream.
  """
  streamCreate(stream: StreamCreateInput!): String
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:write")
  """
  Updates an existing stream.
  """
  streamUpdate(stream: StreamUpdateInput!): Boolean!
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:write")
  """
  Deletes an existing stream.
  """
  streamDelete(id: String!): Boolean!
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:write")

  streamsDelete(ids: [String!]): Boolean! @hasRole(role: "server:admin")
  """
  Update permissions of a user on a given stream.
  """
  streamUpdatePermission(permissionParams: StreamUpdatePermissionInput!): Boolean
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:write")
  """
  Revokes the permissions of a user on a given stream.
  """
  streamRevokePermission(permissionParams: StreamRevokePermissionInput!): Boolean
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:write")

  # Favorite/unfavorite the given stream
  streamFavorite(streamId: String!, favorited: Boolean!): Stream
    @hasRole(role: "server:user")

  """
  Remove yourself from stream collaborators (not possible for the owner)
  """
  streamLeave(streamId: String!): Boolean! @hasRole(role: "server:user")
}

extend type Subscription {
  #
  # User bound subscriptions that operate on the stream collection of an user
  # Example relevant view/usecase: updating the list of streams for a user.
  #

  """
  Subscribes to new stream added event for your profile. Use this to display an up-to-date list of streams.
  **NOTE**: If someone shares a stream with you, this subscription will be triggered with an extra value of `sharedBy` in the payload.
  """
  userStreamAdded: JSONObject
    @hasRole(role: "server:user")
    @hasScope(scope: "profile:read")

  """
  Subscribes to stream removed event for your profile. Use this to display an up-to-date list of streams for your profile.
  **NOTE**: If someone revokes your permissions on a stream, this subscription will be triggered with an extra value of `revokedBy` in the payload.
  """
  userStreamRemoved: JSONObject
    @hasRole(role: "server:user")
    @hasScope(scope: "profile:read")

  #
  # Stream bound subscriptions that operate on the stream itself.
  # Example relevant view/usecase: a single stream connector, or view, or component in a web app
  #

  """
  Subscribes to stream updated event. Use this in clients/components that pertain only to this stream.
  """
  streamUpdated(streamId: String): JSONObject
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")

  """
  Subscribes to stream deleted event. Use this in clients/components that pertain only to this stream.
  """
  streamDeleted(streamId: String): JSONObject
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")
}

input StreamCreateInput {
  name: String
  description: String
  """
  Whether the stream can be viewed by non-contributors
  """
  isPublic: Boolean
  """
  Whether the stream (if public) can be found on public stream exploration pages
  and searches
  """
  isDiscoverable: Boolean
  """
  Optionally specify user IDs of users that you want to invite to be contributors to this stream
  """
  withContributors: [String!]
}

input StreamUpdateInput {
  id: String!
  name: String
  description: String
  """
  Whether the stream can be viewed by non-contributors
  """
  isPublic: Boolean
  """
  Whether the stream (if public) can be found on public stream exploration pages
  and searches
  """
  isDiscoverable: Boolean
  allowPublicComments: Boolean
}

input StreamUpdatePermissionInput {
  streamId: String!
  userId: String!
  role: String!
}

input StreamRevokePermissionInput {
  streamId: String!
  userId: String!
}

input DiscoverableStreamsSortingInput {
  type: DiscoverableStreamsSortType!
  direction: SortDirection!
}

enum DiscoverableStreamsSortType {
  FAVORITES_COUNT
  CREATED_DATE
}
