extend type Query {
  """
  If user is authenticated using an app token, this will describe the app
  """
  authenticatedAsApp: ServerAppListItem @hasServerRole(role: SERVER_USER)
}

extend type User {
  """
  Returns a list of your personal api tokens.
  """
  apiTokens: [ApiToken!]!
    @hasServerRole(role: SERVER_USER)
    @hasScope(scope: "tokens:read")
}

type ApiToken {
  id: String!
  name: String!
  lastChars: String!
  scopes: [String]!
  createdAt: DateTime! #date
  lifespan: BigInt!
  lastUsed: DateTime! #date
}

enum TokenResourceIdentifierType {
  project
  workspace
}

type TokenResourceIdentifier {
  id: String!
  type: TokenResourceIdentifierType!
}

input TokenResourceIdentifierInput {
  id: String!
  type: TokenResourceIdentifierType!
}

input ApiTokenCreateInput {
  scopes: [String!]!
  name: String!
  lifespan: BigInt
}

input AppTokenCreateInput {
  scopes: [String!]!
  name: String!
  lifespan: BigInt
  """
  Optionally limit the token to only have access to specific resources
  """
  limitResources: [TokenResourceIdentifierInput!]
}

"""
A token used to enable an embedded viewer for a private project
"""
type EmbedToken {
  tokenId: String!
  projectId: String!
  user: LimitedUser
  resourceIdString: String!
  createdAt: DateTime!
  lifespan: BigInt!
  lastUsed: DateTime!
}

input EmbedTokenCreateInput {
  projectId: String!
  """
  The model(s) and version(s) string used in the embed url
  """
  resourceIdString: String!
  lifespan: BigInt
}

type CreateEmbedTokenReturn {
  token: String!
  tokenMetadata: EmbedToken!
}

extend type Mutation {
  """
  Creates an personal api token.
  """
  apiTokenCreate(token: ApiTokenCreateInput!): String!
    @hasServerRole(role: SERVER_USER)
    @hasScope(scope: "tokens:write")

  """
  Revokes (deletes) an personal api token/app token.
  """
  apiTokenRevoke(token: String!): Boolean!
    @hasServerRole(role: SERVER_USER)
    @hasScope(scope: "tokens:write")

  """
  Create an app token. Only apps can create app tokens and they don't show up under personal access tokens.
  """
  appTokenCreate(token: AppTokenCreateInput!): String!
    @hasServerRole(role: SERVER_USER)
    @hasScope(scope: "tokens:write")
}

extend type ProjectMutations {
  createEmbedToken(token: EmbedTokenCreateInput!): CreateEmbedTokenReturn!
  revokeEmbedToken(token: String!, projectId: String!): Boolean!
  revokeEmbedTokens(projectId: String!): Boolean!
}

extend type Project {
  embedTokens: [EmbedToken!]!
}
