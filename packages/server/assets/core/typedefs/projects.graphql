extend type Query {
  """
  Find a specific project. Will throw an authorization error if active user isn't authorized
  to see it, for example, if a project isn't public and the user doesn't have the appropriate rights.
  """
  project(id: String!): Project!
}

enum ProjectVisibility {
  """
  Only accessible to explicit collaborators
  """
  PRIVATE
  """
  Legacy - same as public
  """
  UNLISTED
  """
  Accessible to everyone (even non-logged in users)
  """
  PUBLIC
  """
  Accessible to everyone in the project's workspace
  """
  WORKSPACE
}

"""
Any values left null will be ignored, so only set the properties that you want updated
"""
input ProjectUpdateInput {
  id: ID!
  name: String
  description: String
  visibility: ProjectVisibility
  allowPublicComments: Boolean
}

"""
Any values left null will be ignored
"""
input ProjectCreateInput {
  name: String
  description: String
  visibility: ProjectVisibility
}

input ProjectUpdateRoleInput {
  projectId: String!
  userId: String!
  """
  Leave role as null to revoke access entirely
  """
  role: String
}

input ProjectInviteCreateInput {
  """
  Either this or userId must be filled
  """
  email: String
  """
  Either this or email must be filled
  """
  userId: String
  """
  Defaults to the contributor role, if not specified
  """
  role: String
  """
  Can only be specified if guest mode is on or if the user is an admin
  """
  serverRole: String
}

input ProjectInviteUseInput {
  projectId: ID!
  token: String!
  accept: Boolean!
}

type ProjectInviteMutations {
  """
  Invite a new or registered user to be a project collaborator. Can only be invoked by a project owner.
  """
  create(projectId: ID!, input: ProjectInviteCreateInput!): Project!
    @hasScope(scope: "users:invite")
  """
  Batch invite to project
  """
  batchCreate(projectId: ID!, input: [ProjectInviteCreateInput!]!): Project!
    @hasScope(scope: "users:invite")

  """
  Accept or decline a project invite
  """
  use(input: ProjectInviteUseInput!): Boolean!

  """
  Cancel a pending stream invite. Can only be invoked by a project owner.
  """
  cancel(projectId: ID!, inviteId: String!): Project! @hasScope(scope: "users:invite")
}

type ProjectMutations {
  """
  Delete an existing project
  """
  delete(id: String!): Boolean! @hasServerRole(role: SERVER_USER)

  """
  Batch delete projects
  """
  batchDelete(ids: [String!]!): Boolean! @hasServerRole(role: SERVER_ADMIN)

  """
  Updates an existing project
  """
  update(update: ProjectUpdateInput!): Project! @hasServerRole(role: SERVER_USER)

  """
  Create onboarding/tutorial project. If one is already created for the active user, that
  one will be returned instead.
  """
  createForOnboarding: Project!

  """
  Create new project
  """
  create(input: ProjectCreateInput): Project! @hasServerRole(role: SERVER_USER)

  """
  Invite related mutations
  """
  invites: ProjectInviteMutations!

  """
  Update role for a collaborator
  """
  updateRole(input: ProjectUpdateRoleInput!): Project! @hasServerRole(role: SERVER_USER)

  """
  Leave a project. Only possible if you're not the last remaining owner.
  """
  leave(id: String!): Boolean!
}

extend type Mutation {
  projectMutations: ProjectMutations!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "streams:write")
}

extend type User {
  """
  Get projects that the user participates in
  """
  projects(
    limit: Int! = 25
    cursor: String
    filter: UserProjectsFilter
    sortBy: [String!]
  ): UserProjectCollection! @isOwner
}

type UserProjectCollection {
  totalCount: Int!
  numberOfHidden: Int!
  cursor: String
  items: [Project!]!
}

type ProjectCollaborator {
  id: ID!
  role: String!
  user: LimitedUser!
}

type Project {
  id: ID!
  name: String!
  description: String
  visibility: ProjectVisibility!
  allowPublicComments: Boolean!
  """
  Active user's role for this project. `null` if request is not authenticated, or the project is not explicitly shared with you.
  """
  role: String
  createdAt: DateTime!
  updatedAt: DateTime!
  team: [ProjectCollaborator!]!
  """
  Collaborators who have been invited, but not yet accepted.
  """
  invitedTeam: [PendingStreamCollaborator!] @hasStreamRole(role: STREAM_CONTRIBUTOR)
  """
  Source apps used in any models of this project
  """
  sourceApps: [String!]!
}

input UserProjectsFilter {
  """
  Filter out projects by name
  """
  search: String

  """
  Only include projects where user has the specified roles
  """
  onlyWithRoles: [String!]

  """
  Only include projects in the specified workspace
  """
  workspaceId: ID

  """
  Only include personal projects (not in any workspace)
  """
  personalOnly: Boolean

  """
  If set to true, will also include streams that the user may not have an explicit role on,
  but has implicit access to because of workspaces
  """
  includeImplicitAccess: Boolean
}

enum UserProjectsUpdatedMessageType {
  ADDED
  REMOVED
}

type UserProjectsUpdatedMessage {
  """
  Message type
  """
  type: UserProjectsUpdatedMessageType!
  """
  Project ID
  """
  id: String!
  """
  Project entity, null if project was deleted
  """
  project: Project
}

enum ProjectUpdatedMessageType {
  UPDATED
  DELETED
}

type ProjectUpdatedMessage {
  """
  Message type
  """
  type: ProjectUpdatedMessageType!
  """
  Project ID
  """
  id: String!
  """
  Project entity, null if project was deleted
  """
  project: Project
}

extend type Subscription {
  """
  Track newly added or deleted projects owned by the active user
  """
  userProjectsUpdated: UserProjectsUpdatedMessage!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "profile:read")

  """
  Track updates to a specific project
  """
  projectUpdated(id: String!): ProjectUpdatedMessage!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "streams:read")
}

extend type User {
  """
  Get all invitations to projects that the active user has
  """
  projectInvites: [PendingStreamCollaborator!]!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "streams:read")
    @isOwner
}
