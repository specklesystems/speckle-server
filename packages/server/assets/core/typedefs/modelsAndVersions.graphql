extend type Project {
  """
  Returns a flat list of all models
  """
  models(cursor: String, limit: Int! = 25, filter: ProjectModelsFilter): ModelCollection
  """
  Return's a project's models in a tree view with submodels being nested under parent models
  real or fake (with a foo/bar model, it will be nested under foo even if such a model doesn't actually exist)
  """
  modelsTree: [ModelsTreeItem!]!
  """
  Returns a specific model
  """
  model(id: String!): Model
  """
  Return a model tree of children for the specified model name
  """
  modelChildrenTree(fullName: String!): [ModelsTreeItem!]!
}

type Model {
  id: ID!
  name: String!
  author: LimitedUser!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  versionCount: Int!
  previewUrl: String
  commentThreadCount: Int!
  """
  Return a model tree of children
  """
  childrenTree: [ModelsTreeItem!]!
}

type ModelCollection {
  totalCount: Int!
  cursor: String
  items: [Model!]!
}

type ModelsTreeItem {
  name: String!
  fullName: String!
  """
  Nullable cause the item can represent a parent that doesn't actually exist as a model on its own.
  E.g. A model named "foo/bar" is supposed to be a child of "foo" and will be represented as such,
  even if "foo" doesn't exist as its own model.
  """
  model: Model
  """
  Whether or not this item has nested children models
  """
  hasChildren: Boolean!
  children: [ModelsTreeItem!]!
  updatedAt: DateTime!
}

type Version {
  id: ID!
  referencedObject: String!
  message: String
  sourceApplication: String
  author: LimitedUser!
}

type VersionCollection {
  totalCount: Int!
  cursor: String
  items: [Version!]!
}

input ProjectModelsFilter {
  """
  Filter by source apps used in models
  """
  sourceApps: [String!]
  """
  Filter by IDs of contributors who participated in models
  """
  contributors: [String!]
}
