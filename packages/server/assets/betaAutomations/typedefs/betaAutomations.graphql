enum AutomationRunStatus {
  INITIALIZING
  RUNNING
  SUCCEEDED
  FAILED
}

extend type Model {
  automationStatus: AutomationsStatus
}

extend type Version {
  automationStatus: AutomationsStatus
}

type AutomationsStatus {
  id: ID!
  status: AutomationRunStatus!
  statusMessage: String
  automationRuns: [AutomationRun!]!
}

# TODO: Currently not needed
# type Automation {
#   automationName: String!
#   automationId: String!
#   automationRevisionId: String!
#   createdAt: DateTime!
#   runs(cursor: String, limit: Int! = 25): AutomationRunsCollection!
# }

# type AutomationRunsCollection {
#   totalCount: Int!
#   cursor: String
#   items: [AutomationRun!]!
# }

type AutomationRun {
  id: ID!
  automationId: String!
  automationName: String!
  versionId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  functionRuns: [AutomationFunctionRun!]!
  """
  Resolved from all function run statuses
  """
  status: AutomationRunStatus!
}

type AutomationFunctionRun {
  id: ID!
  functionId: String!
  functionName: String!
  functionLogo: String
  elapsed: Float!
  status: AutomationRunStatus!
  # Context view is just a url (most likely overlaid models)
  contextView: String
  resultVersions: [Version!]!
  statusMessage: String
  """
  NOTE: this is the schema for the results field below!
  Current schema: {
    version: "1.0.0",
    values: {
      objectResults: Record<str, {
        category: string
        level: ObjectResultLevel
        objectIds: string[]
        message: str | null
        metadata: Records<str, unknown> | null
        visualoverrides: Records<str, unknown> | null
      }[]>
      blobIds?: string[]
    }
  }
  """
  results: JSONObject # blobIds are in here
}

input AutomationCreateInput {
  projectId: String!
  modelId: String!
  automationName: String!
  automationId: String!
  automationRevisionId: String!
  webhookId: String
}

input FunctionRunStatusInput {
  # we cannot strictly require these values, cause local testers of function, wont have it...
  # Or should we?
  functionId: String!
  functionName: String!
  functionLogo: String
  elapsed: Float!
  status: AutomationRunStatus!
  contextView: String
  resultVersionIds: [String!]!
  statusMessage: String
  """
  Current schema: {
    version: "1.0.0",
    values: {
      speckleObjects: Record<ObjectId, {level: string; statusMessage: string}[]>
      blobIds?: string[]
    }
  }
  """
  results: JSONObject
}

input AutomationRunStatusUpdateInput {
  versionId: String!
  automationId: String!
  automationRevisionId: String!
  automationRunId: String!
  functionRuns: [FunctionRunStatusInput!]!
}

type AutomationMutations {
  functionRunStatusReport(input: AutomationRunStatusUpdateInput!): Boolean!
    @hasServerRole(role: SERVER_USER)
    @hasScope(scope: "automate:report-results")
  create(input: AutomationCreateInput!): Boolean!
    @hasServerRole(role: SERVER_USER)
    @hasScope(scope: "automate:report-results")
}

extend type Mutation {
  automationMutations: AutomationMutations!
}

type ProjectAutomationsStatusUpdatedMessage {
  status: AutomationsStatus!
  version: Version!
  model: Model!
  project: Project!
}

extend type Subscription {
  projectAutomationsStatusUpdated(
    projectId: String!
  ): ProjectAutomationsStatusUpdatedMessage!
}
