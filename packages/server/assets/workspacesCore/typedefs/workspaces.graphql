extend type Query {
  workspace(id: String!): Workspace!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "workspace:read")

  """
  Look for an invitation to a workspace, for the current user (authed or not).

  If token is specified, it will return the corresponding invite even if it belongs to a different user.

  Either token or workspaceId must be specified, or both
  """
  workspaceInvite(workspaceId: String, token: String): PendingWorkspaceCollaborator
  """
  Validates the slug, to make sure it contains only valid characters and its not taken.
  """
  validateWorkspaceSlug(slug: String!): Boolean!
}

input WorkspaceCreateInput {
  name: String!
  slug: String
  description: String
  defaultLogoIndex: Int
  """
  Logo image as base64-encoded string
  """
  logo: String
}

input WorkspaceUpdateInput {
  id: String!
  name: String
  slug: String
  description: String
  """
  Logo image as base64-encoded string
  """
  logo: String
  defaultLogoIndex: Int
  defaultProjectRole: String
  domainBasedMembershipProtectionEnabled: Boolean
  discoverabilityEnabled: Boolean
}

input WorkspaceRoleUpdateInput {
  userId: String!
  workspaceId: String!
  """
  Leave role null to revoke access entirely
  """
  role: String
}

input WorkspaceRoleDeleteInput {
  userId: String!
  workspaceId: String!
}

input WorkspaceProjectInviteCreateInput {
  """
  Either this or userId must be filled
  """
  email: String
  """
  Either this or email must be filled
  """
  userId: String
  """
  Defaults to the contributor role, if not specified
  """
  role: String
  """
  Can only be specified if guest mode is on or if the user is an admin
  """
  serverRole: String
  """
  Only taken into account, if project belongs to a workspace. Defaults to guest access.
  """
  workspaceRole: String
}

input AddDomainToWorkspaceInput {
  domain: String!
  workspaceId: ID!
}

input JoinWorkspaceInput {
  workspaceId: ID!
}

extend type ProjectInviteMutations {
  """
  Create invite(-s) for a project in a workspace. Unlike the base create() mutation, this allows
  configuring the workspace role.
  """
  createForWorkspace(
    projectId: ID!
    inputs: [WorkspaceProjectInviteCreateInput!]!
  ): Project! @hasScope(scope: "users:invite") @hasServerRole(role: SERVER_USER)
}

extend type Mutation {
  workspaceMutations: WorkspaceMutations! @hasServerRole(role: SERVER_GUEST)
}

type WorkspaceMutations {
  create(input: WorkspaceCreateInput!): Workspace!
    @hasServerRole(role: SERVER_USER)
    @hasScope(scope: "workspace:create")
  delete(workspaceId: String!): Boolean!
    @hasScope(scope: "workspace:delete")
    @hasServerRole(role: SERVER_USER)
  update(input: WorkspaceUpdateInput!): Workspace!
    @hasScope(scope: "workspace:update")
    @hasServerRole(role: SERVER_USER)
  updateRole(input: WorkspaceRoleUpdateInput!): Workspace!
    @hasScope(scope: "workspace:update")
    @hasServerRole(role: SERVER_USER)
  leave(id: ID!): Boolean! @hasServerRole(role: SERVER_GUEST)
  join(input: JoinWorkspaceInput!): Workspace! @hasScope(scope: "workspace:update")
  # TODO: this mutation should have an hasWorkspaceRole directive to authorize only workspace admin
  # We are, for the moment, doing the check in the resolver
  addDomain(input: AddDomainToWorkspaceInput!): Workspace!
    @hasScope(scope: "workspace:update")
  # TODO: this mutation should have an hasWorkspaceRole directive to authorize only workspace admin
  # We are, for the moment, doing the check in the resolver
  deleteDomain(input: WorkspaceDomainDeleteInput!): Workspace!
    @hasScope(scope: "workspace:update")
  invites: WorkspaceInviteMutations!
  projects: WorkspaceProjectMutations! @hasServerRole(role: SERVER_USER)
}

type WorkspaceProjectMutations {
  updateRole(input: ProjectUpdateRoleInput!): Project!
    @hasStreamRole(role: STREAM_OWNER)
    @hasWorkspaceRole(role: MEMBER)
  moveToWorkspace(projectId: String!, workspaceId: String!): Project!
}

input WorkspaceDomainDeleteInput {
  workspaceId: ID!
  id: ID!
}

input WorkspaceInviteCreateInput {
  """
  Either this or userId must be filled
  """
  email: String
  """
  Either this or email must be filled
  """
  userId: String
  """
  Defaults to the member role, if not specified
  """
  role: WorkspaceRole
  """
  Defaults to User, if not specified
  """
  serverRole: ServerRole
}

input WorkspaceInviteUseInput {
  token: String!
  accept: Boolean!
  """
  If invite is attached to an unregistered email, the invite can only be used if this is set to true.
  Upon accepting such an invite, the unregistered email will be added to the user's account as well.
  """
  addNewEmail: Boolean
}

input WorkspaceInviteResendInput {
  workspaceId: String!
  inviteId: String!
}

type WorkspaceInviteMutations {
  create(workspaceId: String!, input: WorkspaceInviteCreateInput!): Workspace!
    @hasScope(scope: "users:invite")
    @hasServerRole(role: SERVER_USER)
  batchCreate(workspaceId: String!, input: [WorkspaceInviteCreateInput!]!): Workspace!
    @hasScope(scope: "users:invite")
    @hasServerRole(role: SERVER_USER)
  use(input: WorkspaceInviteUseInput!): Boolean!
  resend(input: WorkspaceInviteResendInput!): Boolean!
    @hasScope(scope: "users:invite")
    @hasServerRole(role: SERVER_USER)
  cancel(workspaceId: String!, inviteId: String!): Workspace!
    @hasScope(scope: "users:invite")
    @hasServerRole(role: SERVER_USER)
}

input PendingWorkspaceCollaboratorsFilter {
  search: String
}

type WorkspaceVersionsCount {
  """
  Total number of versions of all projects in the workspace
  """
  current: Int!
  """
  Maximum number of version of all projects in the workspace with no additional cost
  """
  max: Int!
}

enum Currency {
  GBP
  USD
  EUR
}

type WorkspaceCostItem {
  count: Int!
  name: String!
  cost: Float!
  label: String!
}

type WorkspaceCostDiscount {
  name: String!
  amount: Float!
}

type WorkspaceCost {
  """
  Estimated cost of the workspace with no discount applied
  """
  subTotal: Float!
  """
  Currency of the price
  """
  currency: Currency!
  items: [WorkspaceCostItem!]!
  """
  Discount applied to the total
  """
  discount: WorkspaceCostDiscount
  """
  Total cost with discount applied
  """
  total: Float!
}

type WorkspaceBilling {
  versionsCount: WorkspaceVersionsCount!
  cost: WorkspaceCost!
}

type Workspace {
  id: ID!
  name: String!
  slug: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  """
  Logo image as base64-encoded string
  """
  logo: String
  """
  Selected fallback when `logo` not set
  """
  defaultLogoIndex: Int!
  """
  The default role workspace members will receive for workspace projects.
  """
  defaultProjectRole: String!
  """
  Verified workspace domains
  """
  domains: [WorkspaceDomain!] @hasWorkspaceRole(role: MEMBER)
  """
  Active user's role for this workspace. `null` if request is not authenticated, or the workspace is not explicitly shared with you.
  """
  role: String
  team(
    limit: Int! = 25
    cursor: String
    filter: WorkspaceTeamFilter
  ): WorkspaceCollaboratorCollection!
  """
  Only available to workspace owners/members
  """
  invitedTeam(
    filter: PendingWorkspaceCollaboratorsFilter
  ): [PendingWorkspaceCollaborator!] @hasWorkspaceRole(role: MEMBER)
  projects(
    limit: Int! = 25
    cursor: String
    filter: WorkspaceProjectsFilter
  ): ProjectCollection!
  """
  Billing data for Workspaces beta
  """
  billing: WorkspaceBilling @hasWorkspaceRole(role: MEMBER)
  """
  Enable/Disable restriction to invite users to workspace as Guests only
  """
  domainBasedMembershipProtectionEnabled: Boolean!
  """
  Enable/Disable discovery of the workspace
  """
  discoverabilityEnabled: Boolean!
}

type DiscoverableWorkspace {
  id: ID!
  name: String!
  description: String
  logo: String
  defaultLogoIndex: Int!
}

type WorkspaceDomain {
  id: ID!
  domain: String!
}

input WorkspaceProjectsFilter {
  """
  Filter out projects by name
  """
  search: String
}

input WorkspaceTeamFilter {
  """
  Limit team members to provided role
  """
  role: String
  """
  Search for team members by name or email
  """
  search: String
}

type WorkspaceCollaboratorCollection {
  totalCount: Int!
  cursor: String
  items: [WorkspaceCollaborator!]!
}

type ProjectRole {
  role: String!
  project: Project!
}

"""
Overridden by `WorkspaceCollaboratorGraphQLReturn`
"""
type WorkspaceCollaborator {
  id: ID!
  role: String!
  user: LimitedUser!
  projectRoles: [ProjectRole!]!
}

type PendingWorkspaceCollaborator {
  id: ID!
  updatedAt: DateTime!
  inviteId: String!
  workspaceId: String!
  workspaceName: String!
  """
  E-mail address if target is unregistered or primary e-mail of target registered user
  if token was specified to retrieve this invite
  """
  email: String
  """
  E-mail address or name of the invited user
  """
  title: String!
  """
  Target workspace role
  """
  role: String!
  invitedBy: LimitedUser!
  """
  Set only if user is registered
  """
  user: LimitedUser
  """
  Only available if the active user is the pending workspace collaborator or if it was already
  specified when retrieving this invite
  """
  token: String
}

type WorkspaceCollection {
  totalCount: Int!
  cursor: String
  items: [Workspace!]!
}

extend type User {
  """
  Get discoverable workspaces with verified domains that match the active user's
  """
  discoverableWorkspaces: [DiscoverableWorkspace!]!

  """
  Get the workspaces for the user
  """
  workspaces(
    limit: Int! = 25
    cursor: String = null
    filter: UserWorkspacesFilter
  ): WorkspaceCollection! @isOwner

  """
  Get all invitations to workspaces that the active user has
  """
  workspaceInvites: [PendingWorkspaceCollaborator!]!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "workspace:read")
    @isOwner
}

extend type Project {
  workspace: Workspace
}

type ServerWorkspacesInfo {
  """
  This is a backend control variable for the workspaces feature set.
  Since workspaces need a backend logic to be enabled, this is not enough as a feature flag.
  """
  workspacesEnabled: Boolean!
}

extend type ServerInfo {
  workspaces: ServerWorkspacesInfo!
}

extend type AdminQueries {
  workspaceList(
    query: String
    limit: Int! = 25
    cursor: String = null
  ): WorkspaceCollection!
}

input UserWorkspacesFilter {
  search: String
}

extend type Project {
  workspaceId: String
}

# case of using userSearch, and we alway expose this
extend type LimitedUser {
  workspaceDomainPolicyCompliant(workspaceId: String): Boolean
  # if workspaceId is undefined | null, just return undefined
  # this can be implemented by the workspaceCore resolver too, to avoid frontend component duplication
}
