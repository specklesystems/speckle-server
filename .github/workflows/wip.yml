name: Pipeline test build

on: pull_request

jobs:
  get-version:
    outputs:
      IMAGE_VERSION_TAG: ${{ steps.export-step.outputs.IMAGE_VERSION_TAG }}
    name: Get version
    runs-on: blacksmith
    steps:
      - uses: actions/checkout@v4.2.2
      - run: git fetch origin 'refs/tags/*:refs/tags/*'
      - run: chmod +x ./get_version.sh ./common.sh
        working-directory: ./.github/workflows/scripts
      - run: ./get_version.sh >> result
        working-directory: ./.github/workflows/scripts
      - run: echo "IMAGE_VERSION_TAG=$(cat result)"
        working-directory: ./.github/workflows/scripts
      - id: export-step
        run: echo "IMAGE_VERSION_TAG=$(cat result)" >> "$GITHUB_OUTPUT"
        working-directory: ./.github/workflows/scripts

  docker-build-postgres-container:
    runs-on: blacksmith
    needs: [get-version]
    name: Docker build postgres container
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: useblacksmith/build-push-action@v1
        with:
          push: true
          tags: speckle/speckle-postgres:${{  needs.get-version.outputs.IMAGE_VERSION_TAG  }}
          file: ./utils/postgres/Dockerfile

  test-server-multiregion:
    name: Server multiregion
    needs: [docker-build-postgres-container]
    runs-on: blacksmith
    services:
      redis:
        image: redis:7.2.4
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      postgres0:
        image: speckle/speckle-postgres:${{  needs.get-version.outputs.IMAGE_VERSION_TAG  }}
        env:
          POSTGRES_DB: speckle2_test
          POSTGRES_PASSWORD: speckle
          POSTGRES_USER: speckle
        ports:
          - 5432:5432
        options: >-
          --entrypoint "posgres -c 'max_connections=1000' -c 'wal_level=logical'"
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres1:
        image: speckle/speckle-postgres:${{  needs.get-version.outputs.IMAGE_VERSION_TAG  }}
        env:
          POSTGRES_DB: speckle2_test
          POSTGRES_PASSWORD: speckle
          POSTGRES_USER: speckle
        ports:
          - 5433:5432
        options: >-
          --entrypoint "posgres -c 'max_connections=1000' -c 'wal_level=logical'"
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres2:
        image: speckle/speckle-postgres:${{  needs.get-version.outputs.IMAGE_VERSION_TAG  }}
        env:
          POSTGRES_DB: speckle2_test
          POSTGRES_PASSWORD: speckle
          POSTGRES_USER: speckle
        ports:
          - 5434:5432
        options: >-
          --entrypoint "posgres -c 'max_connections=1000' -c 'wal_level=logical'"
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      minio0:
        image: bitnami/minio
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
          MINIO_SKIP_CLIENT: yes
        ports:
          - 9000:9000

      minio1:
        image: bitnami/minio
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
          MINIO_SKIP_CLIENT: yes
        ports:
          - 9001:9000

      minio2:
        image: bitnami/minio
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
          MINIO_SKIP_CLIENT: yes
        ports:
          - 9002:9000

    env:
      NODE_ENV: test
      POSTGRES_URL: 'postgres://speckle:speckle@localhost:5432/speckle2_test'
      POSTGRES_MAX_CONNECTIONS_SERVER: 50
      SESSION_SECRET: 'keyboard cat'
      STRATEGY_LOCAL: 'true'
      CANONICAL_URL: 'http://127.0.0.1:3000'
      S3_ENDPOINT: 'http://localhost:9000'
      S3_ACCESS_KEY: 'minioadmin'
      S3_SECRET_KEY: 'minioadmin'
      S3_BUCKET: 'speckle-server'
      S3_CREATE_BUCKET: 'true'
      REDIS_URL: 'redis://localhost:6379'
      S3_REGION: '' # optional, defaults to 'us-east-1'
      FRONTEND_ORIGIN: 'http://127.0.0.1:8081'
      ENCRYPTION_KEYS_PATH: 'test/assets/automate/encryptionKeys.json'
      ENABLE_ALL_FFS: 'true'
      RATELIMITER_ENABLED: 'false'
      LICENSE_TOKEN: ${{ secrets.LICENSE_TOKEN }}
      CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
      STRIPE_ENDPOINT_SIGNING_KEY: ${{ secrets.STRIPE_ENDPOINT_SIGNING_KEY }}
      #
      # This are the only different keys:
      #
      MULTI_REGION_CONFIG_PATH: '../../.github/workflows/config/multiregion.test-ci.json'
      FF_GATEKEEPER_MODULE_ENABLED: 'true'
      FF_WORKSPACES_MODULE_ENABLED: 'true'
      FF_WORKSPACES_MULTI_REGION_ENABLED: 'true'
      FF_MOVE_PROJECT_REGION_ENABLED: 'true'
      RUN_TESTS_IN_MULTIREGION_MODE: true
    steps:
      - uses: actions/checkout@v4.2.2
      - run: sudo apt update
      - run: sudo apt install postgresql postgresql-contrib
      # create users
      - run: PGPASSWORD=speckle psql -U speckle -d localhost:5432 -c 'CREATE TABLE users (id SERIAL PRIMARY KEY, name TEXT);'
      - run: PGPASSWORD=speckle psql -U speckle -d localhost:5433 -c 'CREATE TABLE users (id SERIAL PRIMARY KEY, name TEXT);'
      # pubs - sub
      - run: PGPASSWORD=speckle psql -U speckle -d localhost:5432 -c 'CREATE PUBLICATION test_userspub FOR TABLE users';
      - run: PGPASSWORD=speckle psql -U speckle -d localhost:5433 -c 'CREATE EXTENSION IF NOT EXISTS "aiven_extras";'
      - run: PGPASSWORD=speckle psql -U speckle -d localhost:5433 -c `SELECT * FROM aiven_extras.pg_create_subscription('test_userssub_region1', 'dbname=speckle2_test host=postgres0 port=5432 sslmode=disable user=speckle password=speckle', 'test_userspub','test_userssub_region1', TRUE, TRUE);`
      # - uses: useblacksmith/setup-node@v5
      #   with:
      #     node-version: 22
      #     cache: yarn
      # - name: Install dependencies
      #   run: YARN_ENABLE_HARDENED_MODE=0 PUPPETEER_SKIP_DOWNLOAD=true PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 yarn --immutable
      # - name: Build public packages
      #   run: yarn build:public
      # - run: cp .env.test-example .env.test
      #   working-directory: 'packages/server'
      # - name: 'Run test'
      #   run: yarn test:report
      #   working-directory: 'packages/server'
      #   timeout-minutes: 30
      # - uses: codecov/codecov-action@v5
      #   with:
      #     disable_search: true
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     fail_ci_if_error: true
      #     files: packages/server/coverage/lcov.info
