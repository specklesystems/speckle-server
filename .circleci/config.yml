version: 2.1

workflows:
  version: 2

  test-build:
    jobs:
      - test-server:
          filters:
            tags:
              # run tests for all tags
              only: /.*/
      - get-version:
          filters: &filters-build
            tags:
              only: &filters-tag /^[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              only:
                - main

      - docker-build-and-publish-server:
          filters: *filters-build
          context: &docker-hub-context
            - docker-hub
          requires:
            - test-server
            - get-version

      - docker-build-and-publish-frontend:
          context: *docker-hub-context
          filters: *filters-build
          requires:
            - get-version

      - docker-build-and-publish-webhooks:
          context: *docker-hub-context
          filters: *filters-build
          requires:
            - get-version
            - test-server

      - docker-build-and-publish-file-imports:
          context: *docker-hub-context
          filters: *filters-build
          requires:
            - get-version
            - test-server

      - docker-build-and-publish-previews:
          context: *docker-hub-context
          filters: *filters-build
          requires:
            - get-version
            - test-server

      - docker-build-and-publish-test-container:
          context: *docker-hub-context
          filters: *filters-build
          requires:
            - get-version
            - test-server

      - docker-build-and-publish-monitor-container:
          context: *docker-hub-context
          filters: *filters-build
          requires:
            - get-version

      - publish-helm-chart:
          filters: *filters-build
          requires:
            - test-server
            - get-version
            - docker-build-and-publish-server
            - docker-build-and-publish-frontend
            - docker-build-and-publish-webhooks
            - docker-build-and-publish-file-imports
            - docker-build-and-publish-previews
            - docker-build-and-publish-monitor-container
            - docker-build-and-publish-test-container

      - publish-npm:
          filters:
            tags:
              only: *filters-tag
            branches:
              ignore: /.*/
          context:
            - npm-registry
          requires:
            - get-version

jobs:
  get-version:
    docker:
      - image: cimg/python:3.9
    working_directory: &work-dir /tmp/ci
    steps:
      - checkout
      - run: pwd
      - run: mkdir -p workspace
      - run:
          name: set version
          command: |
            echo "export IMAGE_VERSION_TAG=$(.circleci/get_version.sh)" >> workspace/env-vars
      - run: cat workspace/env-vars >> $BASH_ENV
      - run: echo $IMAGE_VERSION_TAG
      # - run: sleep 3m
      - persist_to_workspace:
          root: workspace
          paths:
            - env-vars

  test-server:
    docker:
      - image: cimg/node:16.15
      - image: cimg/redis:6.2.6
      - image: 'cimg/postgres:14.2'
        environment:
          POSTGRES_DB: speckle2_test
          POSTGRES_PASSWORD: speckle
          POSTGRES_USER: speckle
      - image: 'minio/minio'
        command: server /data --console-address ":9001"
        # environment:

    environment:
      NODE_ENV: test
      DATABASE_URL: 'postgres://speckle:speckle@localhost:5432/speckle2_test'
      PGDATABASE: speckle2_test
      PGUSER: speckle
      SESSION_SECRET: 'keyboard cat'
      STRATEGY_LOCAL: 'true'
      CANONICAL_URL: 'http://localhost:3000'
      S3_ENDPOINT: 'http://localhost:9000'
      S3_ACCESS_KEY: 'minioadmin'
      S3_SECRET_KEY: 'minioadmin'
      S3_BUCKET: 'speckle-server'
      S3_CREATE_BUCKET: 'true'
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-server-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn workspaces focus
          working_directory: 'packages/server'

      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-server-{{ checksum "yarn.lock" }}
          paths:
            - .yarn/cache
            - .yarn/unplugged

      - run: 'dockerize -wait tcp://localhost:5432 -wait tcp://localhost:6379 -timeout 1m'

      - run:
          command: touch .env.test
          working_directory: 'packages/server'

      - run:
          command: yarn test:report
          working_directory: 'packages/server'

      - run:
          command: 'bash <(curl -s https://codecov.io/bash)'
          working_directory: 'packages/server'

      - store_test_results:
          path: packages/server/reports

      - store_artifacts:
          path: packages/server/coverage/lcov-report
          destination: package/server/coverage

  docker-build-and-publish: &docker-job
    docker: &docker-image
      - image: cimg/node:16.15
    resource_class: xlarge
    working_directory: *work-dir
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/ci/workspace
      - run: cat workspace/env-vars >> $BASH_ENV
      - setup_remote_docker:
          # a weird issue with yarn installing packages throwing EPERM errors
          # this fixes it
          version: 20.10.12
          docker_layer_caching: true
      - run:
          name: Build and Publish
          command: ./.circleci/build.sh

  docker-build-and-publish-server:
    <<: *docker-job
    environment:
      SPECKLE_SERVER_PACKAGE: server

  docker-build-and-publish-frontend:
    <<: *docker-job
    environment:
      SPECKLE_SERVER_PACKAGE: frontend

  docker-build-and-publish-previews:
    <<: *docker-job
    environment:
      SPECKLE_SERVER_PACKAGE: preview-service

  docker-build-and-publish-webhooks:
    <<: *docker-job
    environment:
      SPECKLE_SERVER_PACKAGE: webhook-service

  docker-build-and-publish-file-imports:
    <<: *docker-job
    environment:
      SPECKLE_SERVER_PACKAGE: fileimport-service

  docker-build-and-publish-test-container:
    <<: *docker-job
    environment:
      FOLDER: utils
      SPECKLE_SERVER_PACKAGE: test-deployment

  docker-build-and-publish-monitor-container:
    <<: *docker-job
    environment:
      FOLDER: utils
      SPECKLE_SERVER_PACKAGE: monitor-deployment

  publish-npm:
    docker: *docker-image
    working_directory: *work-dir
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/ci/workspace
      - run: cat workspace/env-vars >> $BASH_ENV

      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn

      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - .yarn/cache
            - .yarn/unplugged

      - run:
          name: auth to npm as Speckle
          command: |
            echo "npmRegistryServer: https://registry.npmjs.org/" >> .yarnrc.yml 
            echo "npmAuthToken: ${NPM_TOKEN}" >> .yarnrc.yml
      - run:
          name: try login to npm
          command: yarn npm whoami

      - run:
          name: build public packages
          command: yarn workspaces foreach -ptv --no-private run build
      - run:
          name: bump all versions
          # bump all versions in dependency tree order but not in parallel
          command: yarn workspaces foreach -tv version $IMAGE_VERSION_TAG

      - run:
          name: publish to npm
          command: 'yarn workspaces foreach -pv --no-private npm publish --access public'

      # - run:
      # name: commit changes
      # command: |
      # yarn prettier:fix
      # git add .
      # git commit -m '[ci skip] bump version to $IMAGE_VERSION_TAG'
      # git push

  publish-helm-chart:
    docker: *docker-image
    working_directory: *work-dir
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/ci/workspace
      - run: cat workspace/env-vars >> $BASH_ENV
      - add_ssh_keys:
          fingerprints:
            - '18:74:c4:b9:dc:66:b2:66:1d:81:56:0d:0a:87:9b:b1'
      - run:
          name: Publish Helm Chart
          command: ./.circleci/publish_helm_chart.sh
