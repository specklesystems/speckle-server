{
  "openapi": "3.1.1",
  "info": {
    "title": "Speckle.",
    "version": "dev",
    "license": { "name": "Apache 2.0" }
  },
  "paths": {
    "/explorer": {
      "get": {
        "summary": "GraphQL API Explorer",
        "description": "GraphQL API Explorer",
        "responses": {
          "default": { "description": "Returns the GraphQL API Explorer" }
        }
      }
    },
    "/auth/local/login": {
      "post": {
        "summary": "Login with email and password",
        "parameters": [
          {
            "in": "query",
            "name": "challenge",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "User logged in successfully" },
          "400": { "description": "Invalid input" },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "err": { "type": "boolean" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/local/register": {
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "challenge",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string" },
                  "name": { "type": "string" }
                },
                "required": ["email", "password", "name"]
              }
            }
          }
        },
        "summary": "Register with email and password",
        "responses": {
          "200": { "description": "User registered successfully" },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "err": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/accesscode": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "description": "Generates an access code for an app.",
        "responses": {
          "200": { "description": "Returns an access code in the body" },
          "302": { "description": "Redirects with access code in url query" },
          "400": {
            "description": "Invalid access code, or the app does not exist",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": { "description": "Internal error" }
        }
      },
      "options": {
        "description": "Generates a new API token",
        "responses": {
          "default": { "description": "Options for generating a new API token" }
        }
      }
    },
    "/auth/token": {
      "post": {
        "description": "Generates a new API token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appId": { "type": "string" },
                  "appSecret": { "type": "string" },
                  "accessCode": { "type": "string" },
                  "challenge": { "type": "string" },
                  "refreshToken": { "type": "string" }
                },
                "required": ["appId", "appSecret"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Generates a new API token" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "err": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "description": "Logs a user out by invalidating token and refresh token",
        "responses": {
          "200": { "description": "Successfully logged out" },
          "400": {
            "description": "Error while logging out",
            "content": {
              "text/html": {
                "schema": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "/api/stream/{streamId}/blob": {
      "post": {
        "description": "Upload a new blob to a project (stream)",
        "parameters": [
          {
            "in": "path",
            "name": "streamId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully uploaded a blob to the project"
          },
          "404": {
            "description": "Stream could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stream/{streamId}/blob/diff": {
      "post": {
        "description": "Determine the difference (diff) between the provided array of blob Ids and those stored on the server",
        "parameters": [
          {
            "in": "path",
            "name": "streamId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "string" }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The difference between the list of blob Ids provided in the body of the request and those stored on the server"
          },
          "404": {
            "description": "Stream could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stream/{streamId}/blob/{blobId}": {
      "parameters": [
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        },
        {
          "in": "path",
          "name": "blobId",
          "required": true,
          "schema": { "type": "string" }
        }
      ],
      "get": {
        "description": "Gets a blob from a project (stream)",
        "responses": {
          "200": {
            "description": "Successfully retrieved a blob from the project"
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Stream or blob could not be found." }
        }
      },
      "delete": {
        "description": "Deletes a blob from a project (stream)",
        "responses": {
          "204": {
            "description": "Successfully deleted a blob from the project"
          },
          "404": {
            "description": "Stream or blob could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stream/{streamId}/blobs": {
      "parameters": [
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        }
      ],
      "get": {
        "description": "Gets all the blobs of a project (stream)",
        "responses": {
          "200": {
            "description": "Successfully retrieved all the blobs from the project"
          },
          "401": { "description": "Unauthorized" },
          "404": {
            "description": "Stream could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string" } }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes all the blobs from a project (stream)",
        "responses": { "501": { "description": "Not implemented." } }
      }
    },
    "/static": {
      "get": {
        "description": "Static assets",
        "responses": {
          "200": { "description": "An asset was retrieved." },
          "301": {
            "description": "Redirects to the home page.",
            "headers": {
              "Location": {
                "schema": { "type": "string", "format": "uri" }
              }
            },
            "content": {
              "text/html": {
                "schema": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "/liveness": {
      "options": {
        "description": "Liveness options",
        "responses": {
          "200": { "description": "Options for liveness endpoint." }
        }
      },
      "get": {
        "description": "Indicates whether the application is alive.",
        "responses": { "200": { "description": "The application is alive." } }
      }
    },
    "/readiness": {
      "options": {
        "description": "Readiness endpoint options",
        "responses": { "200": { "description": "Options were retrieved." } }
      },
      "get": {
        "description": "Indicates whether the application is ready to accept traffic",
        "responses": { "200": { "description": "The application is ready." } }
      }
    },
    "/objects/{streamId}": {
      "parameters": [
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        }
      ],
      "options": {
        "description": "The options for this endpoint",
        "responses": { "200": { "description": "Options were retrieved." } }
      },
      "post": {
        "description": "Upload objects to the project (stream)",
        "responses": {
          "200": { "description": "Objects were successfully uploaded." },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/objects/{streamId}/{objectId}": {
      "parameters": [
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        },
        {
          "in": "path",
          "name": "objectId",
          "required": true,
          "schema": { "type": "string" }
        }
      ],
      "options": {
        "description": "Options for downloading an object from a project (stream)",
        "responses": { "200": { "description": "Options were retrieved." } }
      },
      "get": {
        "description": "Download objects from a project (stream)",
        "responses": {
          "200": { "description": "Objects were downloaded." },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Stream or Object was not found." }
        }
      }
    },
    "/objects/{streamId}/{objectId}/single": {
      "parameters": [
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        },
        {
          "in": "path",
          "name": "objectId",
          "required": true,
          "schema": { "type": "string" }
        }
      ],
      "options": {
        "description": "Options for downloading a single object from a project (stream)",
        "responses": { "200": { "description": "Options were retrieved." } }
      },
      "get": {
        "description": "Options for downloading a single object from a project (stream)",
        "responses": {
          "200": { "description": "An object was retrieved." },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Stream or Object was not found" }
        }
      }
    },
    "/api/diff/{streamId}": {
      "parameters": [
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        }
      ],
      "options": {
        "description": "Options for the endpoint",
        "responses": { "200": { "description": "Options were retrieved." } }
      },
      "post": {
        "description": "Options for getting the diff of objects for a project (stream)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "objects": { "type": "array", "items": { "type": "string" } }
                },
                "required": ["objects"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "A diff was successfully computed." },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "X-RateLimit-Remaining": {
                "schema": { "type": "integer" }
              }
            }
          }
        }
      }
    },
    "/api/getobjects/{streamId}": {
      "parameters": [
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        }
      ],
      "options": {
        "description": "Options for the endpoint",
        "responses": { "200": { "description": "Options were retrieved." } }
      },
      "post": {
        "description": "Get all objects for a project (stream)",
        "responses": {
          "200": { "description": "All objects were successfully retrieved." },
          "401": { "description": "Unauthorized" },
          "404": {
            "description": "Stream was not found.",
            "headers": {
              "X-RateLimit-Remaining": {
                "schema": { "type": "integer" }
              }
            }
          }
        }
      }
    },
    "/auth/verifyemail": {
      "get": {
        "summary": "Verify email",
        "description": "Verifies an email address",
        "parameters": [
          {
            "in": "query",
            "name": "t",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to the home page.",
            "headers": {
              "Location": {
                "schema": { "type": "string", "format": "uri" }
              }
            }
          }
        }
      }
    },
    "/api/file/{fileType}/{streamId}/{branchName}": {
      "parameters": [
        {
          "in": "path",
          "name": "fileType",
          "required": true,
          "schema": {
            "oneOf": [
              { "type": "string" },
              { "type": "string", "enum": ["autodetect"] }
            ]
          }
        },
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        },
        {
          "in": "path",
          "name": "branchName",
          "required": true,
          "schema": { "type": "string" }
        }
      ],
      "post": {
        "description": "Uploads a file to a project (stream)",
        "responses": {
          "200": {
            "description": "file successfully uploaded to the project (stream)"
          },
          "404": {
            "description": "Stream or branch could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Metrics",
        "description": "Returns Prometheus metrics",
        "responses": { "200": { "description": "Returns Prometheus metrics" } }
      }
    },
    "/preview/{streamId}/{angle}": {
      "parameters": [
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        },
        {
          "in": "path",
          "name": "angle",
          "required": true,
          "schema": {
            "oneOf": [
              { "type": "integer", "minimum": 0 },
              { "type": "string", "enum": ["all"] }
            ]
          }
        }
      ],
      "options": {
        "description": "Options for the endpoint",
        "responses": {
          "200": { "description": "Options successfully retrieved." }
        }
      },
      "get": {
        "description": "Retrieve a preview for the project (stream), at an optional angle",
        "responses": {
          "200": {
            "description": "A preview was successfully retrieved.",
            "content": {
              "image/png": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          }
        }
      }
    },
    "/preview/{streamId}/branches/{branchName}/{angle}": {
      "parameters": [
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        },
        {
          "in": "path",
          "name": "branchName",
          "required": true,
          "schema": { "type": "string" }
        },
        {
          "in": "path",
          "name": "angle",
          "required": true,
          "schema": {
            "oneOf": [
              { "type": "integer", "minimum": 0 },
              { "type": "string", "enum": ["all"] }
            ]
          }
        }
      ],
      "options": {
        "description": "Options for the endpoint",
        "responses": {
          "200": { "description": "Options successfully retrieved." }
        }
      },
      "get": {
        "description": "Retrieve a preview for the project (stream) and model (branch), at an optional angle",
        "responses": {
          "200": {
            "description": "A preview was successfully retrieved.",
            "content": {
              "image/png": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          }
        }
      }
    },
    "/preview/{streamId}/commits/{commitId}/{angle}": {
      "parameters": [
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        },
        {
          "in": "path",
          "name": "commitId",
          "required": true,
          "schema": { "type": "string" }
        },
        {
          "in": "path",
          "name": "angle",
          "required": true,
          "schema": {
            "oneOf": [
              { "type": "integer", "minimum": 0 },
              { "type": "string", "enum": ["all"] }
            ]
          }
        }
      ],
      "options": {
        "description": "Options for the endpoint",
        "responses": {
          "200": { "description": "Options successfully retrieved." }
        }
      },
      "get": {
        "description": "Retrieve a preview for the project (stream) and version (commit), at an optional angle",
        "responses": {
          "200": {
            "description": "A preview was successfully retrieved.",
            "content": {
              "image/png": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          }
        }
      }
    },
    "/preview/{streamId}/objects/{objectId}/{angle}": {
      "parameters": [
        {
          "in": "path",
          "name": "streamId",
          "required": true,
          "schema": { "type": "string" }
        },
        {
          "in": "path",
          "name": "objectId",
          "required": true,
          "schema": { "type": "string" }
        },
        {
          "in": "path",
          "name": "angle",
          "schema": {
            "oneOf": [
              { "type": "integer", "minimum": 0, "maximum": 360 },
              { "type": "string", "enum": ["all"] }
            ]
          }
        }
      ],
      "options": {
        "description": "Options for the endpoint",
        "responses": {
          "200": { "description": "Options successfully retrieved." }
        }
      },
      "get": {
        "description": "Retrieve a preview for the project (stream) and object, at an optional angle",
        "responses": {
          "200": {
            "description": "A preview was successfully retrieved.",
            "content": {
              "image/png": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/auth/pwdreset/request": {
      "post": {
        "description": "Reset a password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email" }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The password reset workflow was successfully started."
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "text/html": {
                "schema": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "/auth/pwdreset/finalize": {
      "post": {
        "description": "Finish resetting a password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tokenId": { "type": "string" },
                  "password": { "type": "string" }
                },
                "required": ["tokenId", "password"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "The password was successfully reset." },
          "400": {
            "description": "Invalid input",
            "content": {
              "text/html": {
                "schema": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "/graphql": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {}
          }
        },
        "summary": "GraphQL",
        "description": "GraphQL endpoint",
        "responses": {
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": { "type": "string" },
                          "extensions": {
                            "type": "object",
                            "properties": {
                              "code": { "type": "string" }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
